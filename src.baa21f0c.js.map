{"version":3,"sources":["../src/lib/directive.ts","../src/lib/dom.ts","../src/lib/part.ts","../src/lib/template.ts","../src/lib/template-instance.ts","../src/lib/template-result.ts","../src/lib/parts.ts","../src/lib/default-template-processor.ts","../src/lib/template-factory.ts","../src/lib/render.ts","src/lit-html.ts","src/util/debounce-render.ts","src/util/with-props.ts","src/util/page-visibility.ts","src/util/index.ts","src/util/audio.ts","intel-hex.js","src/roms/MON-1A.ts","src/roms/MON-1B.ts","src/roms/MON-2.ts","src/roms/JMON.ts","src/roms/MON-1.ts","src/components/app-root.ts","src/components/seven-seg-display.ts","src/components/seven-seg.ts","src/components/key-button.ts","src/components/keypad-classic.ts","src/components/keypad-modern.ts","node_modules/wicked-elements/esm/3rd/regular-elements/poorly/event.js","node_modules/wicked-elements/esm/3rd/regular-elements/poorly/weakset.js","node_modules/wicked-elements/esm/3rd/regular-elements/poorly/assign.js","node_modules/wicked-elements/esm/3rd/regular-elements/poly/contains.js","node_modules/wicked-elements/esm/3rd/regular-elements/poly/matches.js","node_modules/wicked-elements/esm/3rd/regular-elements/3rd/attributechanged.js","node_modules/wicked-elements/esm/3rd/regular-elements/3rd/disconnected.js","node_modules/wicked-elements/esm/3rd/regular-elements/index.js","node_modules/wicked-elements/esm/index.js","src/app.ts","src/index.ts"],"names":["const","let","i","l","blockAddr","blocks","block","$Event","Event","o_O","CustomEvent","type","e","document","createEvent","initEvent","$WeakSet","WeakSet","constructor","WeakMap","$","prototype","add","O","set","has","delete","Math","random","join","Object","defineProperty","value","configurable","hasOwnProperty","call","assign","target","o","arguments","length","k","contains","el","parentNode","indexOf","matches","documentElement","selector","matchesSelector","webkitMatchesSelector","khtmlMatchesSelector","mozMatchesSelector","msMatchesSelector","oMatchesSelector","fallback","querySelectorAll","attributechanged","poly","node","attributeFilter","options","attributes","attributeOldValue","filtered","Array","slice","MutationObserver","changes","observe","handleEvent","attrModified","addEventListener","event","dispatchEvent","attrName","prevValue","attributeName","oldValue","newValue","getAttribute","records","record","disconnected","CONNECTED","DISCONNECTED","notObserving","observer","startObserving","dispatched","subtree","childList","timer","reschedule","push","clearTimeout","setTimeout","splice","addedNodes","removedNodes","Tracker","dispatchAll","nodes","counter","nodeType","dispatchTarget","children","ownerDocument","bootstrap","query","config","waiting","known","regularElements","define","init","Error","ready","setupListeners","get","whenDefined","Promise","resolve","lifecycle","connected","setupList","doc","readyState","once","setup","ws","css","isElement","setupListener","dispatch","method","ATTRIBUTE_FILTER","ONDISCONNECTED","ONATTRIBUTECHANGED","create","wickedElements","component","definition","onconnected","currentTarget","removeEventListener","addIfNeeded","key","handler","invoke"],"mappings":"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","file":"src.baa21f0c.js","sourceRoot":"..","sourcesContent":["\n/**\n * @license\n * Copyright (c) 2017 The Polymer Project Authors. All rights reserved.\n * This code may only be used under the BSD style license found at\n * http://polymer.github.io/LICENSE.txt\n * The complete set of authors may be found at\n * http://polymer.github.io/AUTHORS.txt\n * The complete set of contributors may be found at\n * http://polymer.github.io/CONTRIBUTORS.txt\n * Code distributed by Google as part of the polymer project is also\n * subject to an additional IP rights grant found at\n * http://polymer.github.io/PATENTS.txt\n */\n\nimport {Part} from './part.js';\n\nconst directives = new WeakMap<any, Boolean>();\n\nexport type DirectiveFn = (part: Part) => void;\n\n/**\n * Brands a function as a directive so that lit-html will call the function\n * during template rendering, rather than passing as a value.\n *\n * @param f The directive factory function. Must be a function that returns a\n * function of the signature `(part: Part) => void`. The returned function will\n * be called with the part object\n *\n * @example\n *\n * ```\n * import {directive, html} from 'lit-html';\n *\n * const immutable = directive((v) => (part) => {\n *   if (part.value !== v) {\n *     part.setValue(v)\n *   }\n * });\n * ```\n */\nexport const directive = <F extends Function>(f: F): F =>\n    ((...args: any[]) => {\n      const d = f(...args);\n      directives.set(d, true);\n      return d;\n    }) as unknown as F;\n\nexport const isDirective = (o: any) =>\n    typeof o === 'function' && directives.has(o);\n","/**\n * @license\n * Copyright (c) 2017 The Polymer Project Authors. All rights reserved.\n * This code may only be used under the BSD style license found at\n * http://polymer.github.io/LICENSE.txt\n * The complete set of authors may be found at\n * http://polymer.github.io/AUTHORS.txt\n * The complete set of contributors may be found at\n * http://polymer.github.io/CONTRIBUTORS.txt\n * Code distributed by Google as part of the polymer project is also\n * subject to an additional IP rights grant found at\n * http://polymer.github.io/PATENTS.txt\n */\n\nexport const isCEPolyfill = window.customElements !== undefined &&\n    (window.customElements as any).polyfillWrapFlushCallback !== undefined;\n\n/**\n * Reparents nodes, starting from `startNode` (inclusive) to `endNode`\n * (exclusive), into another container (could be the same container), before\n * `beforeNode`. If `beforeNode` is null, it appends the nodes to the\n * container.\n */\nexport const reparentNodes =\n    (container: Node,\n     start: Node|null,\n     end: Node|null = null,\n     before: Node|null = null): void => {\n      let node = start;\n      while (node !== end) {\n        const n = node!.nextSibling;\n        container.insertBefore(node!, before as Node);\n        node = n;\n      }\n    };\n\n/**\n * Removes nodes, starting from `startNode` (inclusive) to `endNode`\n * (exclusive), from `container`.\n */\nexport const removeNodes =\n    (container: Node, startNode: Node|null, endNode: Node|null = null):\n        void => {\n          let node = startNode;\n          while (node !== endNode) {\n            const n = node!.nextSibling;\n            container.removeChild(node!);\n            node = n;\n          }\n        };\n","/**\n * The Part interface represents a dynamic part of a template instance rendered\n * by lit-html.\n */\nexport interface Part {\n  value: any;\n\n  /**\n   * Sets the current part value, but does not write it to the DOM.\n   * @param value The value that will be committed.\n   */\n  setValue(value: any): void;\n\n  /**\n   * Commits the current part value, cause it to actually be written to the DOM.\n   */\n  commit(): void;\n}\n\n/**\n * A sentinel value that signals that a value was handled by a directive and\n * should not be written to the DOM.\n */\nexport const noChange = {};\n","/**\n * @license\n * Copyright (c) 2017 The Polymer Project Authors. All rights reserved.\n * This code may only be used under the BSD style license found at\n * http://polymer.github.io/LICENSE.txt\n * The complete set of authors may be found at\n * http://polymer.github.io/AUTHORS.txt\n * The complete set of contributors may be found at\n * http://polymer.github.io/CONTRIBUTORS.txt\n * Code distributed by Google as part of the polymer project is also\n * subject to an additional IP rights grant found at\n * http://polymer.github.io/PATENTS.txt\n */\n\nimport {TemplateResult} from './template-result.js';\n\n/**\n * An expression marker with embedded unique key to avoid collision with\n * possible text in templates.\n */\nexport const marker = `{{lit-${String(Math.random()).slice(2)}}}`;\n\n/**\n * An expression marker used text-positions, multi-binding attributes, and\n * attributes with markup-like text values.\n */\nexport const nodeMarker = `<!--${marker}-->`;\n\nexport const markerRegex = new RegExp(`${marker}|${nodeMarker}`);\n\n/**\n * Suffix appended to all bound attribute names.\n */\nexport const boundAttributeSuffix = '$lit$';\n\n/**\n * An updateable Template that tracks the location of dynamic parts.\n */\nexport class Template {\n  parts: TemplatePart[] = [];\n  element: HTMLTemplateElement;\n\n  constructor(result: TemplateResult, element: HTMLTemplateElement) {\n    this.element = element;\n    let index = -1;\n    let partIndex = 0;\n    const nodesToRemove: Node[] = [];\n    const _prepareTemplate = (template: HTMLTemplateElement) => {\n      const content = template.content;\n      // Edge needs all 4 parameters present; IE11 needs 3rd parameter to be\n      // null\n      const walker = document.createTreeWalker(\n          content,\n          133 /* NodeFilter.SHOW_ELEMENT | NodeFilter.SHOW_COMMENT |\n                 NodeFilter.SHOW_TEXT */\n          ,\n          null as any,\n          false);\n      // The actual previous node, accounting for removals: if a node is removed\n      // it will never be the previousNode.\n      let previousNode: Node|undefined;\n      // Used to set previousNode at the top of the loop.\n      let currentNode: Node|undefined;\n      while (walker.nextNode()) {\n        index++;\n        previousNode = currentNode;\n        const node = currentNode = walker.currentNode as Element;\n        if (node.nodeType === 1 /* Node.ELEMENT_NODE */) {\n          if (node.hasAttributes()) {\n            const attributes = node.attributes;\n            // Per\n            // https://developer.mozilla.org/en-US/docs/Web/API/NamedNodeMap,\n            // attributes are not guaranteed to be returned in document order.\n            // In particular, Edge/IE can return them out of order, so we cannot\n            // assume a correspondance between part index and attribute index.\n            let count = 0;\n            for (let i = 0; i < attributes.length; i++) {\n              if (attributes[i].value.indexOf(marker) >= 0) {\n                count++;\n              }\n            }\n            while (count-- > 0) {\n              // Get the template literal section leading up to the first\n              // expression in this attribute\n              const stringForPart = result.strings[partIndex];\n              // Find the attribute name\n              const name = lastAttributeNameRegex.exec(stringForPart)![2];\n              // Find the corresponding attribute\n              // All bound attributes have had a suffix added in\n              // TemplateResult#getHTML to opt out of special attribute\n              // handling. To look up the attribute value we also need to add\n              // the suffix.\n              const attributeLookupName =\n                  name.toLowerCase() + boundAttributeSuffix;\n              const attributeValue = node.getAttribute(attributeLookupName)!;\n              const strings = attributeValue.split(markerRegex);\n              this.parts.push({type: 'attribute', index, name, strings});\n              node.removeAttribute(attributeLookupName);\n              partIndex += strings.length - 1;\n            }\n          }\n          if (node.tagName === 'TEMPLATE') {\n            _prepareTemplate(node as HTMLTemplateElement);\n          }\n        } else if (node.nodeType === 3 /* Node.TEXT_NODE */) {\n          const nodeValue = node.nodeValue!;\n          if (nodeValue.indexOf(marker) < 0) {\n            continue;\n          }\n          const parent = node.parentNode!;\n          const strings = nodeValue.split(markerRegex);\n          const lastIndex = strings.length - 1;\n          // We have a part for each match found\n          partIndex += lastIndex;\n          // Generate a new text node for each literal section\n          // These nodes are also used as the markers for node parts\n          for (let i = 0; i < lastIndex; i++) {\n            parent.insertBefore(\n                (strings[i] === '') ? createMarker() :\n                                      document.createTextNode(strings[i]),\n                node);\n            this.parts.push({type: 'node', index: index++});\n          }\n          parent.insertBefore(\n              strings[lastIndex] === '' ?\n                  createMarker() :\n                  document.createTextNode(strings[lastIndex]),\n              node);\n          nodesToRemove.push(node);\n        } else if (node.nodeType === 8 /* Node.COMMENT_NODE */) {\n          if (node.nodeValue === marker) {\n            const parent = node.parentNode!;\n            // Add a new marker node to be the startNode of the Part if any of\n            // the following are true:\n            //  * We don't have a previousSibling\n            //  * previousSibling is being removed (thus it's not the\n            //    `previousNode`)\n            //  * previousSibling is not a Text node\n            //\n            // TODO(justinfagnani): We should be able to use the previousNode\n            // here as the marker node and reduce the number of extra nodes we\n            // add to a template. See\n            // https://github.com/PolymerLabs/lit-html/issues/147\n            const previousSibling = node.previousSibling;\n            if (previousSibling === null || previousSibling !== previousNode ||\n                previousSibling.nodeType !== Node.TEXT_NODE) {\n              parent.insertBefore(createMarker(), node);\n            } else {\n              index--;\n            }\n            this.parts.push({type: 'node', index: index++});\n            nodesToRemove.push(node);\n            // If we don't have a nextSibling add a marker node.\n            // We don't have to check if the next node is going to be removed,\n            // because that node will induce a new marker if so.\n            if (node.nextSibling === null) {\n              parent.insertBefore(createMarker(), node);\n            } else {\n              index--;\n            }\n            currentNode = previousNode;\n            partIndex++;\n          } else {\n            let i = -1;\n            while ((i = node.nodeValue!.indexOf(marker, i + 1)) !== -1) {\n              // Comment node has a binding marker inside, make an inactive part\n              // The binding won't work, but subsequent bindings will\n              // TODO (justinfagnani): consider whether it's even worth it to\n              // make bindings in comments work\n              this.parts.push({type: 'node', index: -1});\n            }\n          }\n        }\n      }\n    };\n    _prepareTemplate(element);\n    // Remove text binding nodes after the walk to not disturb the TreeWalker\n    for (const n of nodesToRemove) {\n      n.parentNode!.removeChild(n);\n    }\n  }\n}\n\n/**\n * A placeholder for a dynamic expression in an HTML template.\n *\n * There are two built-in part types: AttributePart and NodePart. NodeParts\n * always represent a single dynamic expression, while AttributeParts may\n * represent as many expressions are contained in the attribute.\n *\n * A Template's parts are mutable, so parts can be replaced or modified\n * (possibly to implement different template semantics). The contract is that\n * parts can only be replaced, not removed, added or reordered, and parts must\n * always consume the correct number of values in their `update()` method.\n *\n * TODO(justinfagnani): That requirement is a little fragile. A\n * TemplateInstance could instead be more careful about which values it gives\n * to Part.update().\n */\nexport type TemplatePart = {\n  type: 'node',\n  index: number\n}|{type: 'attribute', index: number, name: string, strings: string[]};\n\nexport const isTemplatePartActive = (part: TemplatePart) => part.index !== -1;\n\n// Allows `document.createComment('')` to be renamed for a\n// small manual size-savings.\nexport const createMarker = () => document.createComment('');\n\n/**\n * This regex extracts the attribute name preceding an attribute-position\n * expression. It does this by matching the syntax allowed for attributes\n * against the string literal directly preceding the expression, assuming that\n * the expression is in an attribute-value position.\n *\n * See attributes in the HTML spec:\n * https://www.w3.org/TR/html5/syntax.html#attributes-0\n *\n * \"\\0-\\x1F\\x7F-\\x9F\" are Unicode control characters\n *\n * \" \\x09\\x0a\\x0c\\x0d\" are HTML space characters:\n * https://www.w3.org/TR/html5/infrastructure.html#space-character\n *\n * So an attribute is:\n *  * The name: any character except a control character, space character, ('),\n *    (\"), \">\", \"=\", or \"/\"\n *  * Followed by zero or more space characters\n *  * Followed by \"=\"\n *  * Followed by zero or more space characters\n *  * Followed by:\n *    * Any character except space, ('), (\"), \"<\", \">\", \"=\", (`), or\n *    * (\") then any non-(\"), or\n *    * (') then any non-(')\n */\nexport const lastAttributeNameRegex =\n    /([ \\x09\\x0a\\x0c\\x0d])([^\\0-\\x1F\\x7F-\\x9F \\x09\\x0a\\x0c\\x0d\"'>=/]+)([ \\x09\\x0a\\x0c\\x0d]*=[ \\x09\\x0a\\x0c\\x0d]*(?:[^ \\x09\\x0a\\x0c\\x0d\"'`<>=]*|\"[^\"]*|'[^']*))$/;\n","/**\n * @license\n * Copyright (c) 2017 The Polymer Project Authors. All rights reserved.\n * This code may only be used under the BSD style license found at\n * http://polymer.github.io/LICENSE.txt\n * The complete set of authors may be found at\n * http://polymer.github.io/AUTHORS.txt\n * The complete set of contributors may be found at\n * http://polymer.github.io/CONTRIBUTORS.txt\n * Code distributed by Google as part of the polymer project is also\n * subject to an additional IP rights grant found at\n * http://polymer.github.io/PATENTS.txt\n */\n\n\nimport {isCEPolyfill} from './dom.js';\nimport {Part} from './part.js';\nimport {RenderOptions} from './render-options.js';\nimport {TemplateProcessor} from './template-processor.js';\nimport {isTemplatePartActive, Template} from './template.js';\n\n/**\n * An instance of a `Template` that can be attached to the DOM and updated\n * with new values.\n */\nexport class TemplateInstance {\n  _parts: Array<Part|undefined> = [];\n  processor: TemplateProcessor;\n  options: RenderOptions;\n  template: Template;\n\n  constructor(\n      template: Template, processor: TemplateProcessor,\n      options: RenderOptions) {\n    this.template = template;\n    this.processor = processor;\n    this.options = options;\n  }\n\n  update(values: any[]) {\n    let i = 0;\n    for (const part of this._parts) {\n      if (part !== undefined) {\n        part.setValue(values[i]);\n      }\n      i++;\n    }\n    for (const part of this._parts) {\n      if (part !== undefined) {\n        part.commit();\n      }\n    }\n  }\n\n  _clone(): DocumentFragment {\n    // When using the Custom Elements polyfill, clone the node, rather than\n    // importing it, to keep the fragment in the template's document. This\n    // leaves the fragment inert so custom elements won't upgrade and\n    // potentially modify their contents by creating a polyfilled ShadowRoot\n    // while we traverse the tree.\n    const fragment = isCEPolyfill ?\n        this.template.element.content.cloneNode(true) as DocumentFragment :\n        document.importNode(this.template.element.content, true);\n\n    const parts = this.template.parts;\n    let partIndex = 0;\n    let nodeIndex = 0;\n    const _prepareInstance = (fragment: DocumentFragment) => {\n      // Edge needs all 4 parameters present; IE11 needs 3rd parameter to be\n      // null\n      const walker = document.createTreeWalker(\n          fragment,\n          133 /* NodeFilter.SHOW_{ELEMENT|COMMENT|TEXT} */,\n          null as any,\n          false);\n      let node = walker.nextNode();\n      // Loop through all the nodes and parts of a template\n      while (partIndex < parts.length && node !== null) {\n        const part = parts[partIndex];\n        // Consecutive Parts may have the same node index, in the case of\n        // multiple bound attributes on an element. So each iteration we either\n        // increment the nodeIndex, if we aren't on a node with a part, or the\n        // partIndex if we are. By not incrementing the nodeIndex when we find a\n        // part, we allow for the next part to be associated with the current\n        // node if neccessasry.\n        if (!isTemplatePartActive(part)) {\n          this._parts.push(undefined);\n          partIndex++;\n        } else if (nodeIndex === part.index) {\n          if (part.type === 'node') {\n            const part = this.processor.handleTextExpression(this.options);\n            part.insertAfterNode(node);\n            this._parts.push(part);\n          } else {\n            this._parts.push(...this.processor.handleAttributeExpressions(\n                node as Element, part.name, part.strings, this.options));\n          }\n          partIndex++;\n        } else {\n          nodeIndex++;\n          if (node.nodeName === 'TEMPLATE') {\n            _prepareInstance((node as HTMLTemplateElement).content);\n          }\n          node = walker.nextNode();\n        }\n      }\n    };\n    _prepareInstance(fragment);\n    if (isCEPolyfill) {\n      document.adoptNode(fragment);\n      customElements.upgrade(fragment);\n    }\n    return fragment;\n  }\n}\n","/**\n * @license\n * Copyright (c) 2017 The Polymer Project Authors. All rights reserved.\n * This code may only be used under the BSD style license found at\n * http://polymer.github.io/LICENSE.txt\n * The complete set of authors may be found at\n * http://polymer.github.io/AUTHORS.txt\n * The complete set of contributors may be found at\n * http://polymer.github.io/CONTRIBUTORS.txt\n * Code distributed by Google as part of the polymer project is also\n * subject to an additional IP rights grant found at\n * http://polymer.github.io/PATENTS.txt\n */\n\nimport {reparentNodes} from './dom.js';\nimport {TemplateProcessor} from './template-processor.js';\nimport {boundAttributeSuffix, lastAttributeNameRegex, marker, nodeMarker} from './template.js';\n\n/**\n * The return type of `html`, which holds a Template and the values from\n * interpolated expressions.\n */\nexport class TemplateResult {\n  strings: TemplateStringsArray;\n  values: any[];\n  type: string;\n  processor: TemplateProcessor;\n\n  constructor(\n      strings: TemplateStringsArray, values: any[], type: string,\n      processor: TemplateProcessor) {\n    this.strings = strings;\n    this.values = values;\n    this.type = type;\n    this.processor = processor;\n  }\n\n  /**\n   * Returns a string of HTML used to create a `<template>` element.\n   */\n  getHTML(): string {\n    const endIndex = this.strings.length - 1;\n    let html = '';\n    for (let i = 0; i < endIndex; i++) {\n      const s = this.strings[i];\n      // This replace() call does two things:\n      // 1) Appends a suffix to all bound attribute names to opt out of special\n      // attribute value parsing that IE11 and Edge do, like for style and\n      // many SVG attributes. The Template class also appends the same suffix\n      // when looking up attributes to creat Parts.\n      // 2) Adds an unquoted-attribute-safe marker for the first expression in\n      // an attribute. Subsequent attribute expressions will use node markers,\n      // and this is safe since attributes with multiple expressions are\n      // guaranteed to be quoted.\n      let addedMarker = false;\n      html += s.replace(\n          lastAttributeNameRegex, (_match, whitespace, name, value) => {\n            addedMarker = true;\n            return whitespace + name + boundAttributeSuffix + value + marker;\n          });\n      if (!addedMarker) {\n        html += nodeMarker;\n      }\n    }\n    return html + this.strings[endIndex];\n  }\n\n  getTemplateElement(): HTMLTemplateElement {\n    const template = document.createElement('template');\n    template.innerHTML = this.getHTML();\n    return template;\n  }\n}\n\n/**\n * A TemplateResult for SVG fragments.\n *\n * This class wraps HTMl in an `<svg>` tag in order to parse its contents in the\n * SVG namespace, then modifies the template to remove the `<svg>` tag so that\n * clones only container the original fragment.\n */\nexport class SVGTemplateResult extends TemplateResult {\n  getHTML(): string {\n    return `<svg>${super.getHTML()}</svg>`;\n  }\n\n  getTemplateElement(): HTMLTemplateElement {\n    const template = super.getTemplateElement();\n    const content = template.content;\n    const svgElement = content.firstChild!;\n    content.removeChild(svgElement);\n    reparentNodes(content, svgElement.firstChild);\n    return template;\n  }\n}\n","/**\n * @license\n * Copyright (c) 2017 The Polymer Project Authors. All rights reserved.\n * This code may only be used under the BSD style license found at\n * http://polymer.github.io/LICENSE.txt\n * The complete set of authors may be found at\n * http://polymer.github.io/AUTHORS.txt\n * The complete set of contributors may be found at\n * http://polymer.github.io/CONTRIBUTORS.txt\n * Code distributed by Google as part of the polymer project is also\n * subject to an additional IP rights grant found at\n * http://polymer.github.io/PATENTS.txt\n */\n\nimport {isDirective} from './directive.js';\nimport {removeNodes} from './dom.js';\nimport {noChange, Part} from './part.js';\nimport {RenderOptions} from './render-options.js';\nimport {TemplateInstance} from './template-instance.js';\nimport {TemplateResult} from './template-result.js';\nimport {createMarker} from './template.js';\n\nexport const isPrimitive = (value: any) =>\n    (value === null ||\n     !(typeof value === 'object' || typeof value === 'function'));\n\n/**\n * Sets attribute values for AttributeParts, so that the value is only set once\n * even if there are multiple parts for an attribute.\n */\nexport class AttributeCommitter {\n  element: Element;\n  name: string;\n  strings: string[];\n  parts: AttributePart[];\n  dirty = true;\n\n  constructor(element: Element, name: string, strings: string[]) {\n    this.element = element;\n    this.name = name;\n    this.strings = strings;\n    this.parts = [];\n    for (let i = 0; i < strings.length - 1; i++) {\n      this.parts[i] = this._createPart();\n    }\n  }\n\n  /**\n   * Creates a single part. Override this to create a differnt type of part.\n   */\n  protected _createPart(): AttributePart {\n    return new AttributePart(this);\n  }\n\n  protected _getValue(): any {\n    const strings = this.strings;\n    const l = strings.length - 1;\n    let text = '';\n\n    for (let i = 0; i < l; i++) {\n      text += strings[i];\n      const part = this.parts[i];\n      if (part !== undefined) {\n        const v = part.value;\n        if (v != null &&\n            (Array.isArray(v) || typeof v !== 'string' && v[Symbol.iterator])) {\n          for (const t of v) {\n            text += typeof t === 'string' ? t : String(t);\n          }\n        } else {\n          text += typeof v === 'string' ? v : String(v);\n        }\n      }\n    }\n\n    text += strings[l];\n    return text;\n  }\n\n  commit(): void {\n    if (this.dirty) {\n      this.dirty = false;\n      this.element.setAttribute(this.name, this._getValue());\n    }\n  }\n}\n\nexport class AttributePart implements Part {\n  committer: AttributeCommitter;\n  value: any = undefined;\n\n  constructor(comitter: AttributeCommitter) {\n    this.committer = comitter;\n  }\n\n  setValue(value: any): void {\n    if (value !== noChange && (!isPrimitive(value) || value !== this.value)) {\n      this.value = value;\n      // If the value is a not a directive, dirty the committer so that it'll\n      // call setAttribute. If the value is a directive, it'll dirty the\n      // committer if it calls setValue().\n      if (!isDirective(value)) {\n        this.committer.dirty = true;\n      }\n    }\n  }\n\n  commit() {\n    while (isDirective(this.value)) {\n      const directive = this.value;\n      this.value = noChange;\n      directive(this);\n    }\n    if (this.value === noChange) {\n      return;\n    }\n    this.committer.commit();\n  }\n}\n\nexport class NodePart implements Part {\n  options: RenderOptions;\n  startNode!: Node;\n  endNode!: Node;\n  value: any = undefined;\n  _pendingValue: any = undefined;\n\n  constructor(options: RenderOptions) {\n    this.options = options;\n  }\n\n  /**\n   * Inserts this part into a container.\n   *\n   * This part must be empty, as its contents are not automatically moved.\n   */\n  appendInto(container: Node) {\n    this.startNode = container.appendChild(createMarker());\n    this.endNode = container.appendChild(createMarker());\n  }\n\n  /**\n   * Inserts this part between `ref` and `ref`'s next sibling. Both `ref` and\n   * its next sibling must be static, unchanging nodes such as those that appear\n   * in a literal section of a template.\n   *\n   * This part must be empty, as its contents are not automatically moved.\n   */\n  insertAfterNode(ref: Node) {\n    this.startNode = ref;\n    this.endNode = ref.nextSibling!;\n  }\n\n  /**\n   * Appends this part into a parent part.\n   *\n   * This part must be empty, as its contents are not automatically moved.\n   */\n  appendIntoPart(part: NodePart) {\n    part._insert(this.startNode = createMarker());\n    part._insert(this.endNode = createMarker());\n  }\n\n  /**\n   * Appends this part after `ref`\n   *\n   * This part must be empty, as its contents are not automatically moved.\n   */\n  insertAfterPart(ref: NodePart) {\n    ref._insert(this.startNode = createMarker());\n    this.endNode = ref.endNode;\n    ref.endNode = this.startNode;\n  }\n\n  setValue(value: any): void {\n    this._pendingValue = value;\n  }\n\n  commit() {\n    while (isDirective(this._pendingValue)) {\n      const directive = this._pendingValue;\n      this._pendingValue = noChange;\n      directive(this);\n    }\n    const value = this._pendingValue;\n    if (value === noChange) {\n      return;\n    }\n    if (isPrimitive(value)) {\n      if (value !== this.value) {\n        this._commitText(value);\n      }\n    } else if (value instanceof TemplateResult) {\n      this._commitTemplateResult(value);\n    } else if (value instanceof Node) {\n      this._commitNode(value);\n    } else if (Array.isArray(value) || value[Symbol.iterator]) {\n      this._commitIterable(value);\n    } else {\n      // Fallback, will render the string representation\n      this._commitText(value);\n    }\n  }\n\n  private _insert(node: Node) {\n    this.endNode.parentNode!.insertBefore(node, this.endNode);\n  }\n\n  private _commitNode(value: Node): void {\n    if (this.value === value) {\n      return;\n    }\n    this.clear();\n    this._insert(value);\n    this.value = value;\n  }\n\n  private _commitText(value: string): void {\n    const node = this.startNode.nextSibling!;\n    value = value == null ? '' : value;\n    if (node === this.endNode.previousSibling &&\n        node.nodeType === Node.TEXT_NODE) {\n      // If we only have a single text node between the markers, we can just\n      // set its value, rather than replacing it.\n      // TODO(justinfagnani): Can we just check if this.value is primitive?\n      node.textContent = value;\n    } else {\n      this._commitNode(document.createTextNode(\n          typeof value === 'string' ? value : String(value)));\n    }\n    this.value = value;\n  }\n\n  private _commitTemplateResult(value: TemplateResult): void {\n    const template = this.options.templateFactory(value);\n    if (this.value && this.value.template === template) {\n      this.value.update(value.values);\n    } else {\n      // Make sure we propagate the template processor from the TemplateResult\n      // so that we use its syntax extension, etc. The template factory comes\n      // from the render function options so that it can control template\n      // caching and preprocessing.\n      const instance =\n          new TemplateInstance(template, value.processor, this.options);\n      const fragment = instance._clone();\n      instance.update(value.values);\n      this._commitNode(fragment);\n      this.value = instance;\n    }\n  }\n\n  private _commitIterable(value: any): void {\n    // For an Iterable, we create a new InstancePart per item, then set its\n    // value to the item. This is a little bit of overhead for every item in\n    // an Iterable, but it lets us recurse easily and efficiently update Arrays\n    // of TemplateResults that will be commonly returned from expressions like:\n    // array.map((i) => html`${i}`), by reusing existing TemplateInstances.\n\n    // If _value is an array, then the previous render was of an\n    // iterable and _value will contain the NodeParts from the previous\n    // render. If _value is not an array, clear this part and make a new\n    // array for NodeParts.\n    if (!Array.isArray(this.value)) {\n      this.value = [];\n      this.clear();\n    }\n\n    // Lets us keep track of how many items we stamped so we can clear leftover\n    // items from a previous render\n    const itemParts = this.value as NodePart[];\n    let partIndex = 0;\n    let itemPart: NodePart|undefined;\n\n    for (const item of value) {\n      // Try to reuse an existing part\n      itemPart = itemParts[partIndex];\n\n      // If no existing part, create a new one\n      if (itemPart === undefined) {\n        itemPart = new NodePart(this.options);\n        itemParts.push(itemPart);\n        if (partIndex === 0) {\n          itemPart.appendIntoPart(this);\n        } else {\n          itemPart.insertAfterPart(itemParts[partIndex - 1]);\n        }\n      }\n      itemPart.setValue(item);\n      itemPart.commit();\n      partIndex++;\n    }\n\n    if (partIndex < itemParts.length) {\n      // Truncate the parts array so _value reflects the current state\n      itemParts.length = partIndex;\n      this.clear(itemPart && itemPart!.endNode);\n    }\n  }\n\n  clear(startNode: Node = this.startNode) {\n    removeNodes(\n        this.startNode.parentNode!, startNode.nextSibling!, this.endNode);\n  }\n}\n\n/**\n * Implements a boolean attribute, roughly as defined in the HTML\n * specification.\n *\n * If the value is truthy, then the attribute is present with a value of\n * ''. If the value is falsey, the attribute is removed.\n */\nexport class BooleanAttributePart implements Part {\n  element: Element;\n  name: string;\n  strings: string[];\n  value: any = undefined;\n  _pendingValue: any = undefined;\n\n  constructor(element: Element, name: string, strings: string[]) {\n    if (strings.length !== 2 || strings[0] !== '' || strings[1] !== '') {\n      throw new Error(\n          'Boolean attributes can only contain a single expression');\n    }\n    this.element = element;\n    this.name = name;\n    this.strings = strings;\n  }\n\n  setValue(value: any): void {\n    this._pendingValue = value;\n  }\n\n  commit() {\n    while (isDirective(this._pendingValue)) {\n      const directive = this._pendingValue;\n      this._pendingValue = noChange;\n      directive(this);\n    }\n    if (this._pendingValue === noChange) {\n      return;\n    }\n    const value = !!this._pendingValue;\n    if (this.value !== value) {\n      if (value) {\n        this.element.setAttribute(this.name, '');\n      } else {\n        this.element.removeAttribute(this.name);\n      }\n    }\n    this.value = value;\n    this._pendingValue = noChange;\n  }\n}\n\n/**\n * Sets attribute values for PropertyParts, so that the value is only set once\n * even if there are multiple parts for a property.\n *\n * If an expression controls the whole property value, then the value is simply\n * assigned to the property under control. If there are string literals or\n * multiple expressions, then the strings are expressions are interpolated into\n * a string first.\n */\nexport class PropertyCommitter extends AttributeCommitter {\n  single: boolean;\n\n  constructor(element: Element, name: string, strings: string[]) {\n    super(element, name, strings);\n    this.single =\n        (strings.length === 2 && strings[0] === '' && strings[1] === '');\n  }\n\n  protected _createPart(): PropertyPart {\n    return new PropertyPart(this);\n  }\n\n  _getValue() {\n    if (this.single) {\n      return this.parts[0].value;\n    }\n    return super._getValue();\n  }\n\n  commit(): void {\n    if (this.dirty) {\n      this.dirty = false;\n      (this.element as any)[this.name] = this._getValue();\n    }\n  }\n}\n\nexport class PropertyPart extends AttributePart {}\n\n// Detect event listener options support. If the `capture` property is read\n// from the options object, then options are supported. If not, then the thrid\n// argument to add/removeEventListener is interpreted as the boolean capture\n// value so we should only pass the `capture` property.\nlet eventOptionsSupported = false;\n\ntry {\n  const options = {\n    get capture() {\n      eventOptionsSupported = true;\n      return false;\n    }\n  };\n  window.addEventListener('test', options as any, options);\n  window.removeEventListener('test', options as any, options);\n} catch (_e) {\n}\n\nexport class EventPart implements Part {\n  element: Element;\n  eventName: string;\n  eventContext?: EventTarget;\n  value: any = undefined;\n  _options?: AddEventListenerOptions;\n  _pendingValue: any = undefined;\n  _boundHandleEvent: (event: Event) => void;\n\n  constructor(element: Element, eventName: string, eventContext?: EventTarget) {\n    this.element = element;\n    this.eventName = eventName;\n    this.eventContext = eventContext;\n    this._boundHandleEvent = (e) => this.handleEvent(e);\n  }\n\n  setValue(value: any): void {\n    this._pendingValue = value;\n  }\n\n  commit() {\n    while (isDirective(this._pendingValue)) {\n      const directive = this._pendingValue;\n      this._pendingValue = noChange;\n      directive(this);\n    }\n    if (this._pendingValue === noChange) {\n      return;\n    }\n\n    const newListener = this._pendingValue;\n    const oldListener = this.value;\n    const shouldRemoveListener = newListener == null ||\n        oldListener != null &&\n            (newListener.capture !== oldListener.capture ||\n             newListener.once !== oldListener.once ||\n             newListener.passive !== oldListener.passive);\n    const shouldAddListener =\n        newListener != null && (oldListener == null || shouldRemoveListener);\n\n    if (shouldRemoveListener) {\n      this.element.removeEventListener(\n          this.eventName, this._boundHandleEvent, this._options);\n    }\n    if (shouldAddListener) {\n      this._options = getOptions(newListener);\n      this.element.addEventListener(\n          this.eventName, this._boundHandleEvent, this._options);\n    }\n    this.value = newListener;\n    this._pendingValue = noChange;\n  }\n\n  handleEvent(event: Event) {\n    if (typeof this.value === 'function') {\n      this.value.call(this.eventContext || this.element, event);\n    } else {\n      this.value.handleEvent(event);\n    }\n  }\n}\n\n// We copy options because of the inconsistent behavior of browsers when reading\n// the third argument of add/removeEventListener. IE11 doesn't support options\n// at all. Chrome 41 only reads `capture` if the argument is an object.\nconst getOptions = (o: any) => o &&\n    (eventOptionsSupported ?\n         {capture: o.capture, passive: o.passive, once: o.once} :\n         o.capture);\n","/**\n * @license\n * Copyright (c) 2017 The Polymer Project Authors. All rights reserved.\n * This code may only be used under the BSD style license found at\n * http://polymer.github.io/LICENSE.txt\n * The complete set of authors may be found at\n * http://polymer.github.io/AUTHORS.txt\n * The complete set of contributors may be found at\n * http://polymer.github.io/CONTRIBUTORS.txt\n * Code distributed by Google as part of the polymer project is also\n * subject to an additional IP rights grant found at\n * http://polymer.github.io/PATENTS.txt\n */\n\nimport {Part} from './part.js';\nimport {AttributeCommitter, BooleanAttributePart, EventPart, NodePart, PropertyCommitter} from './parts.js';\nimport {RenderOptions} from './render-options.js';\nimport {TemplateProcessor} from './template-processor.js';\n\n/**\n * Creates Parts when a template is instantiated.\n */\nexport class DefaultTemplateProcessor implements TemplateProcessor {\n  /**\n   * Create parts for an attribute-position binding, given the event, attribute\n   * name, and string literals.\n   *\n   * @param element The element containing the binding\n   * @param name  The attribute name\n   * @param strings The string literals. There are always at least two strings,\n   *   event for fully-controlled bindings with a single expression.\n   */\n  handleAttributeExpressions(\n      element: Element, name: string, strings: string[],\n      options: RenderOptions): Part[] {\n    const prefix = name[0];\n    if (prefix === '.') {\n      const comitter = new PropertyCommitter(element, name.slice(1), strings);\n      return comitter.parts;\n    }\n    if (prefix === '@') {\n      return [new EventPart(element, name.slice(1), options.eventContext)];\n    }\n    if (prefix === '?') {\n      return [new BooleanAttributePart(element, name.slice(1), strings)];\n    }\n    const comitter = new AttributeCommitter(element, name, strings);\n    return comitter.parts;\n  }\n  /**\n   * Create parts for a text-position binding.\n   * @param templateFactory\n   */\n  handleTextExpression(options: RenderOptions) {\n    return new NodePart(options);\n  }\n}\n\nexport const defaultTemplateProcessor = new DefaultTemplateProcessor();\n","/**\n * @license\n * Copyright (c) 2017 The Polymer Project Authors. All rights reserved.\n * This code may only be used under the BSD style license found at\n * http://polymer.github.io/LICENSE.txt\n * The complete set of authors may be found at\n * http://polymer.github.io/AUTHORS.txt\n * The complete set of contributors may be found at\n * http://polymer.github.io/CONTRIBUTORS.txt\n * Code distributed by Google as part of the polymer project is also\n * subject to an additional IP rights grant found at\n * http://polymer.github.io/PATENTS.txt\n */\n\nimport {TemplateResult} from './template-result.js';\nimport {marker, Template} from './template.js';\n\n/**\n * A function type that creates a Template from a TemplateResult.\n *\n * This is a hook into the template-creation process for rendering that\n * requires some modification of templates before they're used, like ShadyCSS,\n * which must add classes to elements and remove styles.\n *\n * Templates should be cached as aggressively as possible, so that many\n * TemplateResults produced from the same expression only do the work of\n * creating the Template the first time.\n *\n * Templates are usually cached by TemplateResult.strings and\n * TemplateResult.type, but may be cached by other keys if this function\n * modifies the template.\n *\n * Note that currently TemplateFactories must not add, remove, or reorder\n * expressions, because there is no way to describe such a modification\n * to render() so that values are interpolated to the correct place in the\n * template instances.\n */\nexport type TemplateFactory = (result: TemplateResult) => Template;\n\n/**\n * The default TemplateFactory which caches Templates keyed on\n * result.type and result.strings.\n */\nexport function templateFactory(result: TemplateResult) {\n  let templateCache = templateCaches.get(result.type);\n  if (templateCache === undefined) {\n    templateCache = {\n      stringsArray: new WeakMap<TemplateStringsArray, Template>(),\n      keyString: new Map<string, Template>()\n    };\n    templateCaches.set(result.type, templateCache);\n  }\n\n  let template = templateCache.stringsArray.get(result.strings);\n  if (template !== undefined) {\n    return template;\n  }\n\n  // If the TemplateStringsArray is new, generate a key from the strings\n  // This key is shared between all templates with identical content\n  const key = result.strings.join(marker);\n\n  // Check if we already have a Template for this key\n  template = templateCache.keyString.get(key);\n  if (template === undefined) {\n    // If we have not seen this key before, create a new Template\n    template = new Template(result, result.getTemplateElement());\n    // Cache the Template for this key\n    templateCache.keyString.set(key, template);\n  }\n\n  // Cache all future queries for this TemplateStringsArray\n  templateCache.stringsArray.set(result.strings, template);\n  return template;\n}\n\n/**\n * The first argument to JS template tags retain identity across multiple\n * calls to a tag for the same literal, so we can cache work done per literal\n * in a Map.\n *\n * Safari currently has a bug which occasionally breaks this behaviour, so we\n * need to cache the Template at two levels. We first cache the\n * TemplateStringsArray, and if that fails, we cache a key constructed by\n * joining the strings array.\n */\nexport type templateCache = {\n  stringsArray: WeakMap<TemplateStringsArray, Template>;\n  keyString: Map<string, Template>;\n};\n\nexport const templateCaches = new Map<string, templateCache>();\n","/**\n * @license\n * Copyright (c) 2017 The Polymer Project Authors. All rights reserved.\n * This code may only be used under the BSD style license found at\n * http://polymer.github.io/LICENSE.txt\n * The complete set of authors may be found at\n * http://polymer.github.io/AUTHORS.txt\n * The complete set of contributors may be found at\n * http://polymer.github.io/CONTRIBUTORS.txt\n * Code distributed by Google as part of the polymer project is also\n * subject to an additional IP rights grant found at\n * http://polymer.github.io/PATENTS.txt\n */\n\nimport {removeNodes} from './dom.js';\nimport {NodePart} from './parts.js';\nimport {RenderOptions} from './render-options.js';\nimport {templateFactory} from './template-factory.js';\nimport {TemplateResult} from './template-result.js';\n\nexport const parts = new WeakMap<Node, NodePart>();\n\n/**\n * Renders a template to a container.\n *\n * To update a container with new values, reevaluate the template literal and\n * call `render` with the new result.\n *\n * @param result a TemplateResult created by evaluating a template tag like\n *     `html` or `svg`.\n * @param container A DOM parent to render to. The entire contents are either\n *     replaced, or efficiently updated if the same result type was previous\n *     rendered there.\n * @param options RenderOptions for the entire render tree rendered to this\n *     container. Render options must *not* change between renders to the same\n *     container, as those changes will not effect previously rendered DOM.\n */\nexport const render =\n    (result: TemplateResult,\n     container: Element|DocumentFragment,\n     options?: Partial<RenderOptions>) => {\n      let part = parts.get(container);\n      if (part === undefined) {\n        removeNodes(container, container.firstChild);\n        parts.set(container, part = new NodePart({\n                               templateFactory,\n                               ...options,\n                             }));\n        part.appendInto(container);\n      }\n      part.setValue(result);\n      part.commit();\n    };\n","/**\n * @license\n * Copyright (c) 2017 The Polymer Project Authors. All rights reserved.\n * This code may only be used under the BSD style license found at\n * http://polymer.github.io/LICENSE.txt\n * The complete set of authors may be found at\n * http://polymer.github.io/AUTHORS.txt\n * The complete set of contributors may be found at\n * http://polymer.github.io/CONTRIBUTORS.txt\n * Code distributed by Google as part of the polymer project is also\n * subject to an additional IP rights grant found at\n * http://polymer.github.io/PATENTS.txt\n */\n\nimport {defaultTemplateProcessor} from './lib/default-template-processor.js';\nimport {SVGTemplateResult, TemplateResult} from './lib/template-result.js';\n\nexport {DefaultTemplateProcessor, defaultTemplateProcessor} from './lib/default-template-processor.js';\nexport {directive, DirectiveFn, isDirective} from './lib/directive.js';\n// TODO(justinfagnani): remove line when we get NodePart moving methods\nexport {removeNodes, reparentNodes} from './lib/dom.js';\nexport {noChange, Part} from './lib/part.js';\nexport {AttributeCommitter, AttributePart, BooleanAttributePart, EventPart, isPrimitive, NodePart, PropertyCommitter, PropertyPart} from './lib/parts.js';\nexport {RenderOptions} from './lib/render-options.js';\nexport {parts, render} from './lib/render.js';\nexport {templateCaches, templateFactory} from './lib/template-factory.js';\nexport {TemplateInstance} from './lib/template-instance.js';\nexport {TemplateProcessor} from './lib/template-processor.js';\nexport {SVGTemplateResult, TemplateResult} from './lib/template-result.js';\nexport {createMarker, isTemplatePartActive, Template} from './lib/template.js';\n\n/**\n * Interprets a template literal as an HTML template that can efficiently\n * render to and update a container.\n */\nexport const html = (strings: TemplateStringsArray, ...values: any[]) =>\n    new TemplateResult(strings, values, 'html', defaultTemplateProcessor);\n\n/**\n * Interprets a template literal as an SVG template that can efficiently\n * render to and update a container.\n */\nexport const svg = (strings: TemplateStringsArray, ...values: any[]) =>\n    new SVGTemplateResult(strings, values, 'svg', defaultTemplateProcessor);\n","import {html, render} from 'lit-html';\nimport { BaseComponent } from './types';\n\nexport function debounceRender(object:BaseComponent) {\n  let requested = false;\n  const renderFunc = () => {\n    requested = false;\n    render(object.render(object), object.element);\n  };\n  return () => {\n    if (requested) return;\n    requested = true;\n    requestAnimationFrame(renderFunc);\n  }\n}\n","import { debounceRender } from './debounce-render';\nimport { BaseComponent } from './types';\n\nexport function withProps(def:any) {\n\n  const def2 = Object.create(def);\n  const oldInit = def2.init;\n  def2.init = function (event: { currentTarget: any; }) {\n\n    this.element = event.currentTarget;\n    this.requestRender = debounceRender(this);\n\n    if (oldInit) {\n      oldInit.call(this, event);\n    }\n    else {\n      this.requestRender();\n    }\n    observeProperties(this);\n  }\n  return def2;\n};\n\nfunction observeProperties(object:BaseComponent) {\n\n  const props = object.observedProperties;\n  if (!props || !props.length) {\n    object.requestRender();\n    return;\n  };\n\n  const element = object.element;\n  for (let prop of props) {\n\n    // if the component already has a property of this\n    // name then save it for later\n    const hasProp = element.hasOwnProperty(prop)\n    let initValue;\n    if (hasProp) {\n      initValue = element[prop];\n      delete element[prop];\n    }\n\n    // define getters and setters for this property name\n    Object.defineProperty(element, prop, {\n\n      get() {\n        return object[prop]\n      },\n\n      set(value) {\n        const oldValue = object[prop];\n        object[prop] = value;\n        if (oldValue !== value && object.propertyChanged) {\n          object.propertyChanged(\n            prop, value, oldValue\n          );\n        }\n        object.requestRender();\n      }\n    });\n\n    // if we saved an old property value earlier\n    // reassign it to the component\n\n    if (hasProp) {\n      element[prop] = initValue;\n    }\n  }\n}\n","let [hidden, visibilityChange] = (typeof (document as any).msHidden !== 'undefined') ?\n  ['msHidden', 'msvisibilitychange'] : (typeof (document as any).webkitHidden !== 'undefined') ?\n    ['webkitHidden', 'webkitvisibilitychange'] : ['hidden', 'visibilitychange'];\n\nexport function isHidden() {\n  return (document as any)[hidden];\n}\n\nexport function addVisibilityListener(func: EventListenerOrEventListenerObject) {\n  document.addEventListener(visibilityChange, func, false);\n}\n\nexport function removeVisiblityListener(func: EventListenerOrEventListenerObject) {\n  document.removeEventListener(visibilityChange, func, false);\n}\n","export { withProps } from './with-props';\nexport { debounceRender } from './debounce-render';\nexport { isHidden, addVisibilityListener, removeVisiblityListener} from './page-visibility';","var AudioContext = (window as any).AudioContext // Default\n    || (window as any).webkitAudioContext // Safari and old versions of Chrome\n    || false;\n\nlet audioCtx: AudioContext;\nlet source1: OscillatorNode;\nlet active = false;\n\nfunction init() {\n    audioCtx = new AudioContext();\n    if (source1) source1.stop();\n    source1 = audioCtx.createOscillator();\n    source1.type = 'square';\n    source1.frequency.value = 0;\n    source1.connect(audioCtx.destination);\n    source1.start();\n}\n\nexport function audioValue(value: number) {\n    if (value != null && active) {\n        source1.frequency.value = value;\n    }\n}\n\nexport function isAudioPlaying() {\n    return active;\n}\n\nexport function audioInit() {\n    if (!audioCtx) {\n        init();\n    }\n    active = true;\n}\n\nexport function audioPlay(state: boolean) {\n    if (!audioCtx) {\n        init();\n    }\n    if (active === state) return;\n    if (active) {\n        audioCtx.suspend();\n        active = false;\n    }\n    else {\n        audioCtx.resume();\n        active = true;\n    }\n}\n","\n/**\n * Parser/writer for the \"Intel hex\" format.\n */\n\n/*\n * A regexp that matches lines in a .hex file.\n *\n * One hexadecimal character is matched by \"[0-9A-Fa-f]\".\n * Two hex characters are matched by \"[0-9A-Fa-f]{2}\"\n * Eight or more hex characters are matched by \"[0-9A-Fa-f]{8,}\"\n * A capture group of two hex characters is \"([0-9A-Fa-f]{2})\"\n *\n * Record mark         :\n * 8 or more hex chars  ([0-9A-Fa-f]{8,})\n * Checksum                              ([0-9A-Fa-f]{2})\n * Optional newline                                      (?:\\r\\n|\\r|\\n|)\n */\nconst hexLineRegexp = /:([0-9A-Fa-f]{8,})([0-9A-Fa-f]{2})(?:\\r\\n|\\r|\\n|)/g;\n\n\n// Takes a Uint8Array as input,\n// Returns an integer in the 0-255 range.\nfunction checksum(bytes) {\n    return (-bytes.reduce((sum, v)=>sum + v, 0)) & 0xFF;\n}\n\n// Takes two Uint8Arrays as input,\n// Returns an integer in the 0-255 range.\nfunction checksumTwo(array1, array2) {\n    const partial1 = array1.reduce((sum, v)=>sum + v, 0);\n    const partial2 = array2.reduce((sum, v)=>sum + v, 0);\n    return -( partial1 + partial2 ) & 0xFF;\n}\n\n\n// Trivial utility. Converts a number to hex and pads with zeroes up to 2 characters.\nfunction hexpad(number) {\n    return number.toString(16).toUpperCase().padStart(2, '0');\n}\n\n\n// Polyfill as per https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Number/isInteger\nNumber.isInteger = Number.isInteger || function(value) {\n    return typeof value === 'number' &&\n    isFinite(value) &&\n    Math.floor(value) === value;\n};\n\n\n/**\n * @class MemoryMap\n *\n * Represents the contents of a memory layout, with main focus into (possibly sparse) blocks of data.\n *<br/>\n * A {@linkcode MemoryMap} acts as a subclass of\n * {@linkcode https://developer.mozilla.org/docs/Web/JavaScript/Reference/Global_Objects/Map|Map}.\n * In every entry of it, the key is the starting address of a data block (an integer number),\n * and the value is the <tt>Uint8Array</tt> with the data for that block.\n *<br/>\n * The main rationale for this is that a .hex file can contain a single block of contiguous\n * data starting at memory address 0 (and it's the common case for simple .hex files),\n * but complex files with several non-contiguous data blocks are also possible, thus\n * the need for a data structure on top of the <tt>Uint8Array</tt>s.\n *<br/>\n * In order to parse <tt>.hex</tt> files, use the {@linkcode MemoryMap.fromHex} <em>static</em> factory\n * method. In order to write <tt>.hex</tt> files, create a new {@linkcode MemoryMap} and call\n * its {@linkcode MemoryMap.asHexString} method.\n *\n * @extends Map\n * @example\n * import MemoryMap from 'nrf-intel-hex';\n *\n * let memMap1 = new MemoryMap();\n * let memMap2 = new MemoryMap([[0, new Uint8Array(1,2,3,4)]]);\n * let memMap3 = new MemoryMap({0: new Uint8Array(1,2,3,4)});\n * let memMap4 = new MemoryMap({0xCF0: new Uint8Array(1,2,3,4)});\n */\nclass MemoryMap {\n    /**\n     * @param {Iterable} blocks The initial value for the memory blocks inside this\n     * <tt>MemoryMap</tt>. All keys must be numeric, and all values must be instances of\n     * <tt>Uint8Array</tt>. Optionally it can also be a plain <tt>Object</tt> with\n     * only numeric keys.\n     */\n    constructor(blocks) {\n        this._blocks = new Map();\n\n        if (blocks && typeof blocks[Symbol.iterator] === 'function') {\n            for (const tuple of blocks) {\n                if (!(tuple instanceof Array) || tuple.length !== 2) {\n                    throw new Error('First parameter to MemoryMap constructor must be an iterable of [addr, bytes] or undefined');\n                }\n                this.set(tuple[0], tuple[1]);\n            }\n        } else if (typeof blocks === 'object') {\n            // Try iterating through the object's keys\n            const addrs = Object.keys(blocks);\n            for (const addr of addrs) {\n                this.set(parseInt(addr), blocks[addr]);\n            }\n\n        } else if (blocks !== undefined && blocks !== null) {\n            throw new Error('First parameter to MemoryMap constructor must be an iterable of [addr, bytes] or undefined');\n        }\n    }\n\n    set(addr, value) {\n        if (!Number.isInteger(addr)) {\n            throw new Error('Address passed to MemoryMap is not an integer');\n        }\n        if (addr < 0) {\n            throw new Error('Address passed to MemoryMap is negative');\n        }\n        if (!(value instanceof Uint8Array)) {\n            throw new Error('Bytes passed to MemoryMap are not an Uint8Array');\n        }\n        return this._blocks.set(addr, value);\n    }\n    // Delegate the following to the 'this._blocks' Map:\n    get(addr)    { return this._blocks.get(addr);    }\n    clear()      { return this._blocks.clear();      }\n    delete(addr) { return this._blocks.delete(addr); }\n    entries()    { return this._blocks.entries();    }\n    forEach(callback, that) { return this._blocks.forEach(callback, that); }\n    has(addr)    { return this._blocks.has(addr);    }\n    keys()       { return this._blocks.keys();       }\n    values()     { return this._blocks.values();     }\n    get size()   { return this._blocks.size;         }\n    [Symbol.iterator]() { return this._blocks[Symbol.iterator](); }\n\n\n    /**\n     * Parses a string containing data formatted in \"Intel HEX\" format, and\n     * returns an instance of {@linkcode MemoryMap}.\n     *<br/>\n     * The insertion order of keys in the {@linkcode MemoryMap} is guaranteed to be strictly\n     * ascending. In other words, when iterating through the {@linkcode MemoryMap}, the addresses\n     * will be ordered in ascending order.\n     *<br/>\n     * The parser has an opinionated behaviour, and will throw a descriptive error if it\n     * encounters some malformed input. Check the project's\n     * {@link https://github.com/NordicSemiconductor/nrf-intel-hex#Features|README file} for details.\n     *<br/>\n     * If <tt>maxBlockSize</tt> is given, any contiguous data block larger than that will\n     * be split in several blocks.\n     *\n     * @param {String} hexText The contents of a .hex file.\n     * @param {Number} [maxBlockSize=Infinity] Maximum size of the returned <tt>Uint8Array</tt>s.\n     *\n     * @return {MemoryMap}\n     *\n     * @example\n     * import MemoryMap from 'nrf-intel-hex';\n     *\n     * let intelHexString =\n     *     \":100000000102030405060708090A0B0C0D0E0F1068\\n\" +\n     *     \":00000001FF\";\n     *\n     * let memMap = MemoryMap.fromHex(intelHexString);\n     *\n     * for (let [address, dataBlock] of memMap) {\n     *     console.log('Data block at ', address, ', bytes: ', dataBlock);\n     * }\n     */\n    static fromHex(hexText, maxBlockSize = Infinity) {\n        const blocks = new MemoryMap();\n\n        let lastCharacterParsed = 0;\n        let matchResult;\n        let recordCount = 0;\n\n        // Upper Linear Base Address, the 16 most significant bits (2 bytes) of\n        // the current 32-bit (4-byte) address\n        // In practice this is a offset that is summed to the \"load offset\" of the\n        // data records\n        let ulba = 0;\n\n        hexLineRegexp.lastIndex = 0; // Reset the regexp, if not it would skip content when called twice\n\n        while ((matchResult = hexLineRegexp.exec(hexText)) !== null) {\n            recordCount++;\n\n            // By default, a regexp loop ignores gaps between matches, but\n            // we want to be aware of them.\n            if (lastCharacterParsed !== matchResult.index) {\n                throw new Error(\n                    'Malformed hex file: Could not parse between characters ' +\n                    lastCharacterParsed +\n                    ' and ' +\n                    matchResult.index +\n                    ' (\"' +\n                    hexText.substring(lastCharacterParsed, Math.min(matchResult.index, lastCharacterParsed + 16)).trim() +\n                    '\")');\n            }\n            lastCharacterParsed = hexLineRegexp.lastIndex;\n\n            // Give pretty names to the match's capture groups\n            const [, recordStr, recordChecksum] = matchResult;\n\n            // String to Uint8Array - https://stackoverflow.com/questions/43131242/how-to-convert-a-hexademical-string-of-data-to-an-arraybuffer-in-javascript\n            const recordBytes = new Uint8Array(recordStr.match(/[\\da-f]{2}/gi).map((h)=>parseInt(h, 16)));\n\n            const recordLength = recordBytes[0];\n            if (recordLength + 4 !== recordBytes.length) {\n                throw new Error('Mismatched record length at record ' + recordCount + ' (' + matchResult[0].trim() + '), expected ' + (recordLength) + ' data bytes but actual length is ' + (recordBytes.length - 4));\n            }\n\n            const cs = checksum(recordBytes);\n            if (parseInt(recordChecksum, 16) !== cs) {\n                throw new Error('Checksum failed at record ' + recordCount + ' (' + matchResult[0].trim() + '), should be ' + cs.toString(16) );\n            }\n\n            const offset = (recordBytes[1] << 8) + recordBytes[2];\n            const recordType = recordBytes[3];\n            const data = recordBytes.subarray(4);\n\n            if (recordType === 0) {\n                // Data record, contains data\n                // Create a new block, at (upper linear base address + offset)\n                if (blocks.has(ulba + offset)) {\n                    throw new Error('Duplicated data at record ' + recordCount + ' (' + matchResult[0].trim() + ')');\n                }\n                if (offset + data.length > 0x10000) {\n                    throw new Error(\n                        'Data at record ' +\n                        recordCount +\n                        ' (' +\n                        matchResult[0].trim() +\n                        ') wraps over 0xFFFF. This would trigger ambiguous behaviour. Please restructure your data so that for every record the data offset plus the data length do not exceed 0xFFFF.');\n                }\n\n                blocks.set( ulba + offset, data );\n\n            } else {\n\n                // All non-data records must have a data offset of zero\n                if (offset !== 0) {\n                    throw new Error('Record ' + recordCount + ' (' + matchResult[0].trim() + ') must have 0000 as data offset.');\n                }\n\n                switch (recordType) {\n                case 1: // EOF\n                    if (lastCharacterParsed !== hexText.length) {\n                        // This record should be at the very end of the string\n                        throw new Error('There is data after an EOF record at record ' + recordCount);\n                    }\n\n                    return blocks.join(maxBlockSize);\n\n                case 2: // Extended Segment Address Record\n                    // Sets the 16 most significant bits of the 20-bit Segment Base\n                    // Address for the subsequent data.\n                    ulba = ((data[0] << 8) + data[1]) << 4;\n                    break;\n\n                case 3: // Start Segment Address Record\n                    // Do nothing. Record type 3 only applies to 16-bit Intel CPUs,\n                    // where it should reset the program counter (CS+IP CPU registers)\n                    break;\n\n                case 4: // Extended Linear Address Record\n                    // Sets the 16 most significant (upper) bits of the 32-bit Linear Address\n                    // for the subsequent data\n                    ulba = ((data[0] << 8) + data[1]) << 16;\n                    break;\n\n                case 5: // Start Linear Address Record\n                    // Do nothing. Record type 5 only applies to 32-bit Intel CPUs,\n                    // where it should reset the program counter (EIP CPU register)\n                    // It might have meaning for other CPU architectures\n                    // (see http://infocenter.arm.com/help/index.jsp?topic=/com.arm.doc.faqs/ka9903.html )\n                    // but will be ignored nonetheless.\n                    break;\n                default:\n                    throw new Error('Invalid record type 0x' + hexpad(recordType) + ' at record ' + recordCount + ' (should be between 0x00 and 0x05)');\n                }\n            }\n        }\n\n        if (recordCount) {\n            throw new Error('No EOF record at end of file');\n        } else {\n            throw new Error('Malformed .hex file, could not parse any registers');\n        }\n    }\n\n\n    /**\n     * Returns a <strong>new</strong> instance of {@linkcode MemoryMap}, containing\n     * the same data, but concatenating together those memory blocks that are adjacent.\n     *<br/>\n     * The insertion order of keys in the {@linkcode MemoryMap} is guaranteed to be strictly\n     * ascending. In other words, when iterating through the {@linkcode MemoryMap}, the addresses\n     * will be ordered in ascending order.\n     *<br/>\n     * If <tt>maxBlockSize</tt> is given, blocks will be concatenated together only\n     * until the joined block reaches this size in bytes. This means that the output\n     * {@linkcode MemoryMap} might have more entries than the input one.\n     *<br/>\n     * If there is any overlap between blocks, an error will be thrown.\n     *<br/>\n     * The returned {@linkcode MemoryMap} will use newly allocated memory.\n     *\n     * @param {Number} [maxBlockSize=Infinity] Maximum size of the <tt>Uint8Array</tt>s in the\n     * returned {@linkcode MemoryMap}.\n     *\n     * @return {MemoryMap}\n     */\n    join(maxBlockSize = Infinity) {\n\n        // First pass, create a Map of address→length of contiguous blocks\n        const sortedKeys = Array.from(this.keys()).sort((a,b)=>a-b);\n        const blockSizes = new Map();\n        let lastBlockAddr = -1;\n        let lastBlockEndAddr = -1;\n\n        for (let i=0,l=sortedKeys.length; i<l; i++) {\n            const blockAddr = sortedKeys[i];\n            const blockLength = this.get(sortedKeys[i]).length;\n\n            if (lastBlockEndAddr === blockAddr && (lastBlockEndAddr - lastBlockAddr) < maxBlockSize) {\n                // Grow when the previous end address equals the current,\n                // and we don't go over the maximum block size.\n                blockSizes.set(lastBlockAddr, blockSizes.get(lastBlockAddr) + blockLength);\n                lastBlockEndAddr += blockLength;\n            } else if (lastBlockEndAddr <= blockAddr) {\n                // Else mark a new block.\n                blockSizes.set(blockAddr, blockLength);\n                lastBlockAddr = blockAddr;\n                lastBlockEndAddr = blockAddr + blockLength;\n            } else {\n                throw new Error('Overlapping data around address 0x' + blockAddr.toString(16));\n            }\n        }\n\n        // Second pass: allocate memory for the contiguous blocks and copy data around.\n        const mergedBlocks = new MemoryMap();\n        let mergingBlock;\n        let mergingBlockAddr = -1;\n        for (let i=0,l=sortedKeys.length; i<l; i++) {\n            const blockAddr = sortedKeys[i];\n            if (blockSizes.has(blockAddr)) {\n                mergingBlock = new Uint8Array(blockSizes.get(blockAddr));\n                mergedBlocks.set(blockAddr, mergingBlock);\n                mergingBlockAddr = blockAddr;\n            }\n            mergingBlock.set(this.get(blockAddr), blockAddr - mergingBlockAddr);\n        }\n\n        return mergedBlocks;\n    }\n\n    /**\n     * Given a {@link https://developer.mozilla.org/docs/Web/JavaScript/Reference/Global_Objects/Map|<tt>Map</tt>}\n     * of {@linkcode MemoryMap}s, indexed by a alphanumeric ID,\n     * returns a <tt>Map</tt> of address to tuples (<tt>Arrays</tt>s of length 2) of the form\n     * <tt>(id, Uint8Array)</tt>s.\n     *<br/>\n     * The scenario for using this is having several {@linkcode MemoryMap}s, from several calls to\n     * {@link module:nrf-intel-hex~hexToArrays|hexToArrays}, each having a different identifier.\n     * This function locates where those memory block sets overlap, and returns a <tt>Map</tt>\n     * containing addresses as keys, and arrays as values. Each array will contain 1 or more\n     * <tt>(id, Uint8Array)</tt> tuples: the identifier of the memory block set that has\n     * data in that region, and the data itself. When memory block sets overlap, there will\n     * be more than one tuple.\n     *<br/>\n     * The <tt>Uint8Array</tt>s in the output are\n     * {@link https://developer.mozilla.org/docs/Web/JavaScript/Reference/Global_Objects/TypedArray/subarray|subarrays}\n     * of the input data; new memory is <strong>not</strong> allocated for them.\n     *<br/>\n     * The insertion order of keys in the output <tt>Map</tt> is guaranteed to be strictly\n     * ascending. In other words, when iterating through the <tt>Map</tt>, the addresses\n     * will be ordered in ascending order.\n     *<br/>\n     * When two blocks overlap, the corresponding array of tuples will have the tuples ordered\n     * in the insertion order of the input <tt>Map</tt> of block sets.\n     *<br/>\n     *\n     * @param {Map.MemoryMap} memoryMaps The input memory block sets\n     *\n     * @example\n     * import MemoryMap from 'nrf-intel-hex';\n     *\n     * let memMap1 = MemoryMap.fromHex( hexdata1 );\n     * let memMap2 = MemoryMap.fromHex( hexdata2 );\n     * let memMap3 = MemoryMap.fromHex( hexdata3 );\n     *\n     * let maps = new Map([\n     *  ['file A', blocks1],\n     *  ['file B', blocks2],\n     *  ['file C', blocks3]\n     * ]);\n     *\n     * let overlappings = MemoryMap.overlapMemoryMaps(maps);\n     *\n     * for (let [address, tuples] of overlappings) {\n     *     // if 'tuples' has length > 1, there is an overlap starting at 'address'\n     *\n     *     for (let [address, tuples] of overlappings) {\n     *         let [id, bytes] = tuple;\n     *         // 'id' in this example is either 'file A', 'file B' or 'file C'\n     *     }\n     * }\n     * @return {Map.Array<mixed,Uint8Array>} The map of possibly overlapping memory blocks\n     */\n    static overlapMemoryMaps(memoryMaps) {\n        // First pass: create a list of addresses where any block starts or ends.\n        const cuts = new Set();\n        for (const [, blocks] of memoryMaps) {\n            for (const [address, block] of blocks) {\n                cuts.add(address);\n                cuts.add(address + block.length);\n            }\n        }\n\n        const orderedCuts = Array.from(cuts.values()).sort((a,b)=>a-b);\n        const overlaps = new Map();\n\n        // Second pass: iterate through the cuts, get slices of every intersecting blockset\n        for (let i=0, l=orderedCuts.length-1; i<l; i++) {\n            const cut = orderedCuts[i];\n            const nextCut = orderedCuts[i+1];\n            const tuples = [];\n\n            for (const [setId, blocks] of memoryMaps) {\n                // Find the block with the highest address that is equal or lower to\n                // the current cut (if any)\n                const blockAddr = Array.from(blocks.keys()).reduce((acc, val)=>{\n                    if (val > cut) {\n                        return acc;\n                    }\n                    return Math.max( acc, val );\n                }, -1);\n\n                if (blockAddr !== -1) {\n                    const block = blocks.get(blockAddr);\n                    const subBlockStart = cut - blockAddr;\n                    const subBlockEnd = nextCut - blockAddr;\n\n                    if (subBlockStart < block.length) {\n                        tuples.push([ setId, block.subarray(subBlockStart, subBlockEnd) ]);\n                    }\n                }\n            }\n\n            if (tuples.length) {\n                overlaps.set(cut, tuples);\n            }\n        }\n\n        return overlaps;\n    }\n\n\n    /**\n     * Given the output of the {@linkcode MemoryMap.overlapMemoryMaps|overlapMemoryMaps}\n     * (a <tt>Map</tt> of address to an <tt>Array</tt> of <tt>(id, Uint8Array)</tt> tuples),\n     * returns a {@linkcode MemoryMap}. This discards the IDs in the process.\n     *<br/>\n     * The output <tt>Map</tt> contains as many entries as the input one (using the same addresses\n     * as keys), but the value for each entry will be the <tt>Uint8Array</tt> of the <b>last</b>\n     * tuple for each address in the input data.\n     *<br/>\n     * The scenario is wanting to join together several parsed .hex files, not worrying about\n     * their overlaps.\n     *<br/>\n     *\n     * @param {Map.Array<mixed,Uint8Array>} overlaps The (possibly overlapping) input memory blocks\n     * @return {MemoryMap} The flattened memory blocks\n     */\n    static flattenOverlaps(overlaps) {\n        return new MemoryMap(\n            Array.from(overlaps.entries()).map(([address, tuples]) => {\n                return [address, tuples[tuples.length - 1][1] ];\n            })\n        );\n    }\n\n\n    /**\n     * Returns a new instance of {@linkcode MemoryMap}, where:\n     *\n     * <ul>\n     *  <li>Each key (the start address of each <tt>Uint8Array</tt>) is a multiple of\n     *    <tt>pageSize</tt></li>\n     *  <li>The size of each <tt>Uint8Array</tt> is exactly <tt>pageSize</tt></li>\n     *  <li>Bytes from the input map to bytes in the output</li>\n     *  <li>Bytes not in the input are replaced by a padding value</li>\n     * </ul>\n     *<br/>\n     * The scenario is wanting to prepare pages of bytes for a write operation, where the write\n     * operation affects a whole page/sector at once.\n     *<br/>\n     * The insertion order of keys in the output {@linkcode MemoryMap} is guaranteed\n     * to be strictly ascending. In other words, when iterating through the\n     * {@linkcode MemoryMap}, the addresses will be ordered in ascending order.\n     *<br/>\n     * The <tt>Uint8Array</tt>s in the output will be newly allocated.\n     *<br/>\n     *\n     * @param {Number} [pageSize=1024] The size of the output pages, in bytes\n     * @param {Number} [pad=0xFF] The byte value to use for padding\n     * @return {MemoryMap}\n     */\n    paginate( pageSize=1024, pad=0xFF) {\n        if (pageSize <= 0) {\n            throw new Error('Page size must be greater than zero');\n        }\n        const outPages = new MemoryMap();\n        let page;\n\n        const sortedKeys = Array.from(this.keys()).sort((a,b)=>a-b);\n\n        for (let i=0,l=sortedKeys.length; i<l; i++) {\n            const blockAddr = sortedKeys[i];\n            const block = this.get(blockAddr);\n            const blockLength = block.length;\n            const blockEnd = blockAddr + blockLength;\n\n            for (let pageAddr = blockAddr - (blockAddr % pageSize); pageAddr < blockEnd; pageAddr += pageSize) {\n                page = outPages.get(pageAddr);\n                if (!page) {\n                    page = new Uint8Array(pageSize);\n                    page.fill(pad);\n                    outPages.set(pageAddr, page);\n                }\n\n                const offset = pageAddr - blockAddr;\n                let subBlock;\n                if (offset <= 0) {\n                    // First page which intersects the block\n                    subBlock = block.subarray(0, Math.min(pageSize + offset, blockLength));\n                    page.set(subBlock, -offset);\n                } else {\n                    // Any other page which intersects the block\n                    subBlock = block.subarray(offset, offset + Math.min(pageSize, blockLength - offset));\n                    page.set(subBlock, 0);\n                }\n            }\n        }\n\n        return outPages;\n    }\n\n\n    /**\n     * Locates the <tt>Uint8Array</tt> which contains the given offset,\n     * and returns the four bytes held at that offset, as a 32-bit unsigned integer.\n     *\n     *<br/>\n     * Behaviour is similar to {@linkcode https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/DataView/getUint32|DataView.prototype.getUint32},\n     * except that this operates over a {@linkcode MemoryMap} instead of\n     * over an <tt>ArrayBuffer</tt>, and that this may return <tt>undefined</tt> if\n     * the address is not <em>entirely</em> contained within one of the <tt>Uint8Array</tt>s.\n     *<br/>\n     *\n     * @param {Number} offset The memory offset to read the data\n     * @param {Boolean} [littleEndian=false] Whether to fetch the 4 bytes as a little- or big-endian integer\n     * @return {Number|undefined} An unsigned 32-bit integer number\n     */\n    getUint32(offset, littleEndian) {\n        const keys = Array.from(this.keys());\n\n        for (let i=0,l=keys.length; i<l; i++) {\n            const blockAddr = keys[i];\n            const block = this.get(blockAddr);\n            const blockLength = block.length;\n            const blockEnd = blockAddr + blockLength;\n\n            if (blockAddr <= offset && (offset+4) <= blockEnd) {\n                return (new DataView(block.buffer, offset - blockAddr, 4)).getUint32(0, littleEndian);\n            }\n        }\n        return;\n    }\n\n\n    /**\n     * Returns a <tt>String</tt> of text representing a .hex file.\n     * <br/>\n     * The writer has an opinionated behaviour. Check the project's\n     * {@link https://github.com/NordicSemiconductor/nrf-intel-hex#Features|README file} for details.\n     *\n     * @param {Number} [lineSize=16] Maximum number of bytes to be encoded in each data record.\n     * Must have a value between 1 and 255, as per the specification.\n     *\n     * @return {String} String of text with the .hex representation of the input binary data\n     *\n     * @example\n     * import MemoryMap from 'nrf-intel-hex';\n     *\n     * let memMap = new MemoryMap();\n     * let bytes = new Uint8Array(....);\n     * memMap.set(0x0FF80000, bytes); // The block with 'bytes' will start at offset 0x0FF80000\n     *\n     * let string = memMap.asHexString();\n     */\n    asHexString(lineSize = 16) {\n        let lowAddress  = 0;    // 16 least significant bits of the current addr\n        let highAddress = -1 << 16; // 16 most significant bits of the current addr\n        const records = [];\n        if (lineSize <=0) {\n            throw new Error('Size of record must be greater than zero');\n        } else if (lineSize > 255) {\n            throw new Error('Size of record must be less than 256');\n        }\n\n        // Placeholders\n        const offsetRecord = new Uint8Array(6);\n        const recordHeader = new Uint8Array(4);\n\n        const sortedKeys = Array.from(this.keys()).sort((a,b)=>a-b);\n        for (let i=0,l=sortedKeys.length; i<l; i++) {\n            const blockAddr = sortedKeys[i];\n            const block = this.get(blockAddr);\n\n            // Sanity checks\n            if (!(block instanceof Uint8Array)) {\n                throw new Error('Block at offset ' + blockAddr + ' is not an Uint8Array');\n            }\n            if (blockAddr < 0) {\n                throw new Error('Block at offset ' + blockAddr + ' has a negative thus invalid address');\n            }\n            const blockSize = block.length;\n            if (!blockSize) { continue; }   // Skip zero-length blocks\n\n\n            if (blockAddr > (highAddress + 0xFFFF)) {\n                // Insert a new 0x04 record to jump to a new 64KiB block\n\n                // Round up the least significant 16 bits - no bitmasks because they trigger\n                // base-2 negative numbers, whereas subtracting the modulo maintains precision\n                highAddress = blockAddr - blockAddr % 0x10000;\n                lowAddress = 0;\n\n                offsetRecord[0] = 2;    // Length\n                offsetRecord[1] = 0;    // Load offset, high byte\n                offsetRecord[2] = 0;    // Load offset, low byte\n                offsetRecord[3] = 4;    // Record type\n                offsetRecord[4] = highAddress >> 24;    // new address offset, high byte\n                offsetRecord[5] = highAddress >> 16;    // new address offset, low byte\n\n                records.push(\n                    ':' +\n                    Array.prototype.map.call(offsetRecord, hexpad).join('') +\n                    hexpad(checksum(offsetRecord))\n                );\n            }\n\n            if (blockAddr < (highAddress + lowAddress)) {\n                throw new Error(\n                    'Block starting at 0x' +\n                    blockAddr.toString(16) +\n                    ' overlaps with a previous block.');\n            }\n\n            lowAddress = blockAddr % 0x10000;\n            let blockOffset = 0;\n            const blockEnd = blockAddr + blockSize;\n            if (blockEnd > 0xFFFFFFFF) {\n                throw new Error('Data cannot be over 0xFFFFFFFF');\n            }\n\n            // Loop for every 64KiB memory segment that spans this block\n            while (highAddress + lowAddress < blockEnd) {\n\n                if (lowAddress > 0xFFFF) {\n                    // Insert a new 0x04 record to jump to a new 64KiB block\n                    highAddress += 1 << 16; // Increase by one\n                    lowAddress = 0;\n\n                    offsetRecord[0] = 2;    // Length\n                    offsetRecord[1] = 0;    // Load offset, high byte\n                    offsetRecord[2] = 0;    // Load offset, low byte\n                    offsetRecord[3] = 4;    // Record type\n                    offsetRecord[4] = highAddress >> 24;    // new address offset, high byte\n                    offsetRecord[5] = highAddress >> 16;    // new address offset, low byte\n\n                    records.push(\n                        ':' +\n                        Array.prototype.map.call(offsetRecord, hexpad).join('') +\n                        hexpad(checksum(offsetRecord))\n                    );\n                }\n\n                let recordSize = -1;\n                // Loop for every record for that spans the current 64KiB memory segment\n                while (lowAddress < 0x10000 && recordSize) {\n                    recordSize = Math.min(\n                        lineSize,                            // Normal case\n                        blockEnd - highAddress - lowAddress, // End of block\n                        0x10000 - lowAddress                 // End of low addresses\n                    );\n\n                    if (recordSize) {\n\n                        recordHeader[0] = recordSize;   // Length\n                        recordHeader[1] = lowAddress >> 8;    // Load offset, high byte\n                        recordHeader[2] = lowAddress;    // Load offset, low byte\n                        recordHeader[3] = 0;    // Record type\n\n                        const subBlock = block.subarray(blockOffset, blockOffset + recordSize);   // Data bytes for this record\n\n                        records.push(\n                            ':' +\n                            Array.prototype.map.call(recordHeader, hexpad).join('') +\n                            Array.prototype.map.call(subBlock, hexpad).join('') +\n                            hexpad(checksumTwo(recordHeader, subBlock))\n                        );\n\n                        blockOffset += recordSize;\n                        lowAddress += recordSize;\n                    }\n                }\n            }\n        }\n\n        records.push(':00000001FF');    // EOF record\n\n        return records.join('\\n');\n    }\n\n\n    /**\n     * Performs a deep copy of the current {@linkcode MemoryMap}, returning a new one\n     * with exactly the same contents, but allocating new memory for each of its\n     * <tt>Uint8Array</tt>s.\n     *\n     * @return {MemoryMap}\n     */\n    clone() {\n        const cloned = new MemoryMap();\n\n        for (let [addr, value] of this) {\n            cloned.set(addr, new Uint8Array(value));\n        }\n\n        return cloned;\n    }\n\n\n    /**\n     * Given one <tt>Uint8Array</tt>, looks through its contents and returns a new\n     * {@linkcode MemoryMap}, stripping away those regions where there are only\n     * padding bytes.\n     * <br/>\n     * The start of the input <tt>Uint8Array</tt> is assumed to be offset zero for the output.\n     * <br/>\n     * The use case here is dumping memory from a working device and try to see the\n     * \"interesting\" memory regions it has. This assumes that there is a constant,\n     * predefined padding byte value being used in the \"non-interesting\" regions.\n     * In other words: this will work as long as the dump comes from a flash memory\n     * which has been previously erased (thus <tt>0xFF</tt>s for padding), or from a\n     * previously blanked HDD (thus <tt>0x00</tt>s for padding).\n     * <br/>\n     * This method uses <tt>subarray</tt> on the input data, and thus does not allocate memory\n     * for the <tt>Uint8Array</tt>s.\n     *\n     * @param {Uint8Array} bytes The input data\n     * @param {Number} [padByte=0xFF] The value of the byte assumed to be used as padding\n     * @param {Number} [minPadLength=64] The minimum number of consecutive pad bytes to\n     * be considered actual padding\n     *\n     * @return {MemoryMap}\n     */\n    static fromPaddedUint8Array(bytes, padByte=0xFF, minPadLength=64) {\n\n        if (!(bytes instanceof Uint8Array)) {\n            throw new Error('Bytes passed to fromPaddedUint8Array are not an Uint8Array');\n        }\n\n        // The algorithm used is naïve and checks every byte.\n        // An obvious optimization would be to implement Boyer-Moore\n        // (see https://en.wikipedia.org/wiki/Boyer%E2%80%93Moore_string_search_algorithm )\n        // or otherwise start skipping up to minPadLength bytes when going through a non-pad\n        // byte.\n        // Anyway, we could expect a lot of cases where there is a majority of pad bytes,\n        // and the algorithm should check most of them anyway, so the perf gain is questionable.\n\n        const memMap = new MemoryMap();\n        let consecutivePads = 0;\n        let lastNonPad = -1;\n        let firstNonPad = 0;\n        let skippingBytes = false;\n        const l = bytes.length;\n\n        for (let addr = 0; addr < l; addr++) {\n            const byte = bytes[addr];\n\n            if (byte === padByte) {\n                consecutivePads++;\n                if (consecutivePads >= minPadLength) {\n                    // Edge case: ignore writing a zero-length block when skipping\n                    // bytes at the beginning of the input\n                    if (lastNonPad !== -1) {\n                        /// Add the previous block to the result memMap\n                        memMap.set(firstNonPad, bytes.subarray(firstNonPad, lastNonPad+1));\n                    }\n\n                    skippingBytes = true;\n                }\n            } else {\n                if (skippingBytes) {\n                    skippingBytes = false;\n                    firstNonPad = addr;\n                }\n                lastNonPad = addr;\n                consecutivePads = 0;\n            }\n        }\n\n        // At EOF, add the last block if not skipping bytes already (and input not empty)\n        if (!skippingBytes && lastNonPad !== -1) {\n            memMap.set(firstNonPad, bytes.subarray(firstNonPad, l));\n        }\n\n        return memMap;\n    }\n\n\n    /**\n     * Returns a new instance of {@linkcode MemoryMap}, containing only data between\n     * the addresses <tt>address</tt> and <tt>address + length</tt>.\n     * Behaviour is similar to {@linkcode https://developer.mozilla.org/docs/Web/JavaScript/Reference/Global_Objects/Array/slice|Array.prototype.slice},\n     * in that the return value is a portion of the current {@linkcode MemoryMap}.\n     *\n     * <br/>\n     * The returned {@linkcode MemoryMap} might be empty.\n     *\n     * <br/>\n     * Internally, this uses <tt>subarray</tt>, so new memory is not allocated.\n     *\n     * @param {Number} address The start address of the slice\n     * @param {Number} length The length of memory map to slice out\n     * @return {MemoryMap}\n     */\n    slice(address, length = Infinity){\n        if (length < 0) {\n            throw new Error('Length of the slice cannot be negative');\n        }\n\n        const sliced = new MemoryMap();\n\n        for (let [blockAddr, block] of this) {\n            const blockLength = block.length;\n\n            if ((blockAddr + blockLength) >= address && blockAddr < (address + length)) {\n                const sliceStart = Math.max(address, blockAddr);\n                const sliceEnd = Math.min(address + length, blockAddr + blockLength);\n                const sliceLength = sliceEnd - sliceStart;\n                const relativeSliceStart = sliceStart - blockAddr;\n\n                if (sliceLength > 0) {\n                    sliced.set(sliceStart, block.subarray(relativeSliceStart, relativeSliceStart + sliceLength));\n                }\n            }\n        }\n        return sliced;\n    }\n\n    /**\n     * Returns a new instance of {@linkcode https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/DataView/getUint32|Uint8Array}, containing only data between\n     * the addresses <tt>address</tt> and <tt>address + length</tt>. Any byte without a value\n     * in the input {@linkcode MemoryMap} will have a value of <tt>padByte</tt>.\n     *\n     * <br/>\n     * This method allocates new memory.\n     *\n     * @param {Number} address The start address of the slice\n     * @param {Number} length The length of memory map to slice out\n     * @param {Number} [padByte=0xFF] The value of the byte assumed to be used as padding\n     * @return {MemoryMap}\n     */\n    slicePad(address, length, padByte=0xFF){\n        if (length < 0) {\n            throw new Error('Length of the slice cannot be negative');\n        }\n        \n        const out = (new Uint8Array(length)).fill(padByte);\n\n        for (let [blockAddr, block] of this) {\n            const blockLength = block.length;\n\n            if ((blockAddr + blockLength) >= address && blockAddr < (address + length)) {\n                const sliceStart = Math.max(address, blockAddr);\n                const sliceEnd = Math.min(address + length, blockAddr + blockLength);\n                const sliceLength = sliceEnd - sliceStart;\n                const relativeSliceStart = sliceStart - blockAddr;\n\n                if (sliceLength > 0) {\n                    out.set(block.subarray(relativeSliceStart, relativeSliceStart + sliceLength), sliceStart - address);\n                }\n            }\n        }\n        return out;\n    }\n\n    /**\n     * Checks whether the current memory map contains the one given as a parameter.\n     *\n     * <br/>\n     * \"Contains\" means that all the offsets that have a byte value in the given\n     * memory map have a value in the current memory map, and that the byte values\n     * are the same.\n     *\n     * <br/>\n     * An empty memory map is always contained in any other memory map.\n     *\n     * <br/>\n     * Returns boolean <tt>true</tt> if the memory map is contained, <tt>false</tt>\n     * otherwise.\n     *\n     * @param {MemoryMap} memMap The memory map to check\n     * @return {Boolean}\n     */\n    contains(memMap) {\n        for (let [blockAddr, block] of memMap) {\n\n            const blockLength = block.length;\n\n            const slice = this.slice(blockAddr, blockLength).join().get(blockAddr);\n\n            if ((!slice) || slice.length !== blockLength ) {\n                return false;\n            }\n\n            for (const i in block) {\n                if (block[i] !== slice[i]) {\n                    return false;\n                }\n            }\n        }\n        return true;\n    }\n}\n\n\nexport default MemoryMap;\n\n","export const ROM =\n`:10000000C3F005FFFFFFFFFFC32003FFFFFFFFFF5C\n:10001000C3E003FFFFFFFFFFC39004FFFFFFFFFFED\n:10002000FFFFFFFFFFFFFFFF213002C34100FFFF83\n:10003000213005C34100FFFFC7FFFFFFFFFFFFFFA8\n:10004000FF220008C3B001FFFFFFFFFFFFFFFFFF1C\n:10005000FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFB0\n:10006000FFFFFFFFFFFFDB00E61FED47C931D00FA9\n:10007000CD3101CD8E013AF90FFE00C29600ED5749\n:10008000FE10DA8800C3E30021F70FCD6F01ED6F9A\n:1000900023ED6FC3DA00ED57FE10DAB700AF32FA86\n:1000A0000FED57FE13CADA00FE12CAC200FE11CAD3\n:1000B000C600FE10CAD0002AF70FCD7B01ED6FC33A\n:1000C000E3002AF70FE92AF70F2B22F70FC3E3000B\n:1000D0002AF70F2322F70FC3E3003E00060421F3A3\n:1000E0000F18073E67060221F10F32F90FD9ED5BB9\n:1000F000F70FCD02011ACD0E01D9CBE62310FBC3B9\n:100100006D0021F30F7BCD15017ACD1501C921F1C9\n:100110000FCD1501C9F5CD26017723F10F0F0F0F74\n:10012000CD26017723C9E5215F01E60F856F7EE1CA\n:10013000C93EFFED47CD4001ED57FEFFC0C3310181\n:10014000DDE5010106DD7E00D302DD2379D301CB9D\n:10015000274F3E0A3DC25401D30110E9DDE1C9EB4E\n:1001600028CDAD2EA7E729EF2F6FE6C3ECC747CD0B\n:100170007B01C0233E00772BED57C9ED57473AFA74\n:100180000FFE0078C0AF773D32FA0F78C9000E0A33\n:1001900021500029110100AFD3023DD3014110FECF\n:1001A000EE80ED5220F5C9FFFFFFFFFFFFFFFFFFCD\n:1001B000ED5B00081AE61FFE1FC80000FE1ECAB055\n:1001C00001FE00CAE9014713D521F801CDE301F58D\n:1001D00078211002CDE3016F2600F14FCD9301D1BC\n:1001E000C3B4015F1600197EC9D51100101B7AB384\n:1001F000C2ED01D113C3B4018C837C757067625C5E\n:1002000057524E4845413C3936322F2C2A27252358\n:10021000191A1C1D1E20232527292C2E3133373A6D\n:100220003D4145494D52575C10FFFFFFFFFFFFFF67\n:1002300006060A0D060D0A0D121614120F11120FE2\n:100240000D0D0D0A120F0D0A0806080A0F0A0D0FF0\n:1002500006060A0D060D0A0D121614120F11120FC2\n:100260000D0D0D0A120F0D0A0806080A0612001ECF\n:10027000FD2A0008DD21F10F060621F10F360023CB\n:1002800010FB060611F70F21F60F7E122B1B10FA3A\n:10029000FD7E00FD23E61FFE1FC8FE1E28D221B3EF\n:1002A00002CDE30132F10F3E80F5CD4001F13D205A\n:1002B000F818CF006FE6C3ECC747E36E28E8CEC25C\n:1002C0006BEB4F2F43A746EAE0AECD0410180000B9\n:1002D0000008050C0C0E0013080511050013080991\n:1002E0001200091200130805001305031809191953\n:1002F000191904051209070D0504000216000A0E5B\n:10030000080D00080111041600060E110013051A4D\n:100310000000000000001EFFFFFFFFFFFFFFFFFFC8\n:10032000DD21F10FAF32FA0F32FB0F060621F10F7C\n:1003300036002310FB3AF50FFE00203711F50F2190\n:10034000F40F06047E122B1B10FAED5FCDB50332BD\n:10035000F10F3E0000F53EFFED473AFB0FCDB50330\n:1003600032F60FCD4001ED57FEFFC48E03F13D2064\n:10037000E418C2CD8E01060621F10F36002310FBD2\n:100380003AFA0F21F30FCD1501CD31011892FE106D\n:1003900020083AFB0F3C32FB0FC93AF60F4F21F50C\n:1003A0000F06057EB9200A36003AFA0F3C2732FACA\n:1003B0000F2B10EFC9E607CD2601C9160E14000C4D\n:1003C0000E1205001213140F09041A1F0E08000D57\n:1003D0000E19191909000C0E12131A1FFFFFFFFF47\n:1003E000DD21F10F3E2332FA0F21F10F0606360010\n:1003F0002310FB1E00CD6604CD3101ED57FE043005\n:10040000F4FE0028F05F3AFA0FBB284438429327E5\n:1004100032FA0FCD660421F60F36AE1600CD40013C\n:100420001520FA3AFA0FFE01282C3D27D604273072\n:10043000FBC60427FE0028105F3AFA0F932732FA12\n:100440000F21F60F362818ADED5FE603282818E8CF\n:1004500011BB03C3590411CC03ED530008CD700246\n:10046000CD3101C3E00321F10F3AFA0FCD1501237D\n:100470007BCD260177C93CC33804FF14121417172B\n:100480001214101F0111011101111FFFFFFFFFFFC7\n:10049000DD21F10FFD2100083E50FD77003E20FDDB\n:1004A0007701AFFD770221F10F060636002310FB1E\n:1004B0001680FD7E0121F10FCD15012323FD7E0065\n:1004C000CD15013EFFED47CD4001ED57FEFFC4F3D2\n:1004D0000415C2B204FD7E02D60127FD770247FD56\n:1004E0007E008027FE00CA1105FE60301BFD7700EC\n:1004F000C3B004FD7E01FE00C83D27FD7701FD7EEF\n:1005000002C60227FD7702C9118404DD210000180C\n:1005100003117B04ED530008CDB001CD3101C39030\n:1005200004FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFD6\n:100530000B0A080A0A0A0606060B0A080A0A0A0A29\n:100540000A0A0B0A080A0A0A0606060A080A0D0D14\n:100550000D0D0D000D05080B0B0B0606060B0A080A\n:100560000A0A0A0606060B0A0608080808080A0B03\n:100570000A080606060606060000001EFFFFFFFF2B\n:1005800021000831D00FDD21F10F22F70FAF32F932\n:100590000F32FA0F0E0A215000CD93010E202130A8\n:1005A00000CD9301C3E300FFFFFFFFFFFFFFFFFF4D\n:1005B00021000811000B7EFEFFC2C205210008C306\n:1005C000B605D3031AFEFFC2D00511000BC3C40544\n:1005D000D304CDE105131AD304CDE1051323C3B62B\n:1005E0000501FF030B78B1C2E405C9FFFFFFFFFF60\n:1005F000ED73D80F31F00FF5C5D5E5DDE5FDE50864\n:10060000D9F5C5D5E5ED57F5C38005FFFFFFFFFF21\n:10061000FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFEA\n:10062000FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFDA\n:10063000FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFCA\n:10064000FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFBA\n:10065000FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFAA\n:10066000FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF9A\n:10067000FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF8A\n:10068000FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF7A\n:10069000FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF6A\n:1006A000FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF5A\n:1006B000FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF4A\n:1006C000FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF3A\n:1006D000FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF2A\n:1006E000FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF1A\n:1006F000FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF0A\n:10070000FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF9\n:10071000FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFE9\n:10072000FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFD9\n:10073000FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFC9\n:10074000FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFB9\n:10075000FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFA9\n:10076000FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF99\n:10077000FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF89\n:10078000FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF79\n:10079000FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF69\n:1007A000FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF59\n:1007B000FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF49\n:1007C000FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF39\n:1007D000FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF29\n:1007E000FFFF6AC7FBC7500A93C7FBC78DC6BF0D83\n:1007F000B1C643010BBC000FE00F6D0143016E0851\n:00000001FF\n`;\n","export const ROM =\n`:10000000C3F005FFFFFFFFFFC32003FFFFFFFFFF5C\n:10001000C3E003FFFFFFFFFFC39004FFFFFFFFFFED\n:10002000FFFFFFFFFFFFFFFF213002C34100FFFF83\n:10003000213005C34100FFFFC7FFFFFFFFFFFFFFA8\n:10004000FF220008C3B001FFFFFFFFFFFFFFFFFF1C\n:10005000FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFB0\n:10006000FFFFFFFFFFFFDB00E61FED47C931D00FA9\n:10007000CD3101CD8E013AF90FFE00C29600ED5749\n:10008000FE10DA8800C3E30021F70FCD6F01ED6F9A\n:1000900023ED6FC3DA00ED57FE10DAB700AF32FA86\n:1000A0000FED57FE13CADA00FE12CAC200FE11CAD3\n:1000B000C600FE10CAD0002AF70FCD7B01ED6FC33A\n:1000C000E3002AF70FE92AF70F2B22F70FC3E3000B\n:1000D0002AF70F2322F70FC3E3003E00060421F3A3\n:1000E0000F18073E67060221F10F32F90FD9ED5BB9\n:1000F000F70FCD02011ACD0E01D9CBE62310FBC3B9\n:100100006D0021F30F7BCD15017ACD1501C921F1C9\n:100110000FCD1501C9F5CD26017723F10F0F0F0F74\n:10012000CD26017723C9E5215F01E60F856F7EE1CA\n:10013000C93EFFED47CD4001ED57FEFFC0C3310181\n:10014000DDE5010106DD7E00D302DD2379D301CB9D\n:10015000274F3E0A3DC25401D30110E9DDE1C9EB4E\n:1001600028CDAD2EA7E729EF2F6FE6C3ECC747CD0B\n:100170007B01C0233E00772BED57C9ED57473AFA74\n:100180000FFE0078C0AF773D32FA0F78C9000E0A33\n:1001900021500029110100AFD3023DD3014110FECF\n:1001A000EE80ED5220F5C9FFFFFFFFFFFFFFFFFFCD\n:1001B000ED5B00081AE61FFE1FC80000FE1ECAB055\n:1001C00001FE00CAE9014713D521F801CDE301F58D\n:1001D00078211002CDE3016F2600F14FCD9301D1BC\n:1001E000C3B4015F1600197EC9D51100101B7AB384\n:1001F000C2ED01D113C3B4018C837C757067625C5E\n:1002000057524E4845413C3936322F2C2A27252358\n:10021000191A1C1D1E20232527292C2E3133373A6D\n:100220003D4145494D52575C10FFFFFFFFFFFFFF67\n:1002300006060A0D060D0A0D121614120F11120FE2\n:100240000D0D0D0A120F0D0A0806080A0F0A0D0FF0\n:1002500006060A0D060D0A0D121614120F11120FC2\n:100260000D0D0D0A120F0D0A0806080A0612001ECF\n:10027000FD2A0008DD21F10F060621F10F360023CB\n:1002800010FB060611F70F21F60F7E122B1B10FA3A\n:10029000FD7E00FD23E61FFE1FC8FE1E28D221B3EF\n:1002A00002CDE30132F10F3E80F5CD4001F13D205A\n:1002B000F818CF006FE6C3ECC747E36E28E8CEC25C\n:1002C0006BEB4F2F43A746EAE0AECD0410180000B9\n:1002D0000008050C0C0E0013080511050013080991\n:1002E0001200091200130805001305031809191953\n:1002F000191904051209070D0504000216000A0E5B\n:10030000080D00080111041600060E110013051A4D\n:100310000000000000001EFFFFFFFFFFFFFFFFFFC8\n:10032000DD21F10FAF32FA0F32FB0F060621F10F7C\n:1003300036002310FB3AF50FFE00203711F50F2190\n:10034000F40F06047E122B1B10FAED5FCDB50332BD\n:10035000F10F3E0000F53EFFED473AFB0FCDB50330\n:1003600032F60FCD4001ED57FEFFC48E03F13D2064\n:10037000E418C2CD8E01060621F10F36002310FBD2\n:100380003AFA0F21F30FCD1501CD31011892FE106D\n:1003900020083AFB0F3C32FB0FC93AF60F4F21F50C\n:1003A0000F06057EB9200A36003AFA0F3C2732FACA\n:1003B0000F2B10EFC9E607CD2601C9160E14000C4D\n:1003C0000E1205001213140F09041A1F0E08000D57\n:1003D0000E19191909000C0E12131A1FFFFFFFFF47\n:1003E000DD21F10F3E2332FA0F21F10F0606360010\n:1003F0002310FB1E00CD6604CD3101ED57FE043005\n:10040000F4FE0028F05F3AFA0FBB284438429327E5\n:1004100032FA0FCD660421F60F36AE1600CD40013C\n:100420001520FA3AFA0FFE01282C3D27D604273072\n:10043000FBC60427FE0028105F3AFA0F932732FA12\n:100440000F21F60F362818ADED5FE603282818E8CF\n:1004500011BB03C3590411CC03ED530008CD700246\n:10046000CD3101C3E00321F10F3AFA0FCD1501237D\n:100470007BCD260177C93CC33804FF14121417172B\n:100480001214101F0111011101111FFFFFFFFFFFC7\n:10049000DD21F10FFD2100083E50FD77003E20FDDB\n:1004A0007701AFFD770221F10F060636002310FB1E\n:1004B0001680FD7E0121F10FCD15012323FD7E0065\n:1004C000CD15013EFFED47CD4001ED57FEFFC4F3D2\n:1004D0000415C2B204FD7E02D60127FD770247FD56\n:1004E0007E008027FE00CA1105FE60301BFD7700EC\n:1004F000C3B004FD7E01FE00C83D27FD7701FD7EEF\n:1005000002C60227FD7702C9118404DD210000180C\n:1005100003117B04ED530008CDB001CD3101C39030\n:1005200004FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFD6\n:100530000B0A080A0A0A0606060B0A080A0A0A0A29\n:100540000A0A0B0A080A0A0A0606060A080A0D0D14\n:100550000D0D0D000D05080B0B0B0606060B0A080A\n:100560000A0A0A0606060B0A0608080808080A0B03\n:100570000A080606060606060000001EFFFFFFFF2B\n:1005800021000831D00FDD21F10F22F70FAF32F932\n:100590000F32FA0F0E0A215000CD93010E202130A8\n:1005A00000CD9301C3E300FFFFFFFFFFFFFFFFFF4D\n:1005B00021000811000B7EFEFFC2C205210008C306\n:1005C000B605D3031AFEFFC2D00511000BC3C40544\n:1005D000D304CDE105131AD304CDE1051323C3B62B\n:1005E0000501FF030B78B1C2E405C9FFFFFFFFFF60\n:1005F000ED73D80F31F00FF5C5D5E5DDE5FDE50864\n:10060000D9F5C5D5E5ED57F5C38005FFFFFFFFFF21\n:10061000FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFEA\n:10062000FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFDA\n:10063000FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFCA\n:10064000FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFBA\n:10065000FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFAA\n:10066000FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF9A\n:10067000FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF8A\n:10068000FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF7A\n:10069000FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF6A\n:1006A000FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF5A\n:1006B000FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF4A\n:1006C000FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF3A\n:1006D000FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF2A\n:1006E000FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF1A\n:1006F000FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF0A\n:10070000FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF9\n:10071000FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFE9\n:10072000FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFD9\n:10073000FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFC9\n:10074000FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFB9\n:10075000FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFA9\n:10076000FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF99\n:10077000FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF89\n:10078000FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF79\n:10079000FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF69\n:1007A000FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF59\n:1007B000FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF49\n:1007C000FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF39\n:1007D000FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF29\n:1007E000FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF19\n:1007F000FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF09\n:00000001FF\n`;","export const ROM =\n`:10000000C30002FFFFFFFFFF2AC008E9FFFFFFFF59\n:100010002AC208E9FFFFFFFF2AC408E9FFFFFFFF2C\n:100020002AC608E9FFFFFFFF2AC808E9FFFFFFFF14\n:100030002ACA08E9FFFFFFFF2ACC08E9FFFFFFFFFC\n:10004000FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFC0\n:10005000FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFB0\n:10006000FFFFFFFFFFFFF5DB0032E008F1ED45FF8A\n:10007000FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF90\n:10008000EB28CDAD2EA7E729EF2F6FE6C3ECC747CE\n:10009000E36628E84EC22D6BEB4F2F4BA746EAE0F4\n:1000A000ACA4AEC9100818042C00FFFFFFFFFFFF2F\n:1000B00000090000FFFFFFFFFFFFFFFFF8FF000048\n:1000C0001B181E1D12170E290B222917120C24298A\n:1000D00029292929FE1C1D18170AFFFFFFFFFFFF12\n:1000E000CD8902031804CD89020BCD9004CD700296\n:1000F00021DF08CBC6CB8EC37803FFFFFFFFFFFFD6\n:10010000FD1010FD11EF12E1135414C910BE10B20E\n:1001100010A9199F1A961C801E86207F22772471B1\n:10012000266A28642A5F2D592F543250354B3847A0\n:100130003C433F3F433C47384B355032542F592DB9\n:100140005F2A64286A26712477227F20861E8E1CEF\n:10015000961A9419A918B316BE15C914D513E1122D\n:10016000EF11FD10FFFFFFFFFFFFFFFFFFFFFFFF8E\n:10017000C5D5E5F5A720035F18021E802100018781\n:10018000856F4E23467BD30110FE46AFD30110FE90\n:100190000D20F1F1E1D1C1C9FFFFFFFFFFFFFFFF1C\n:1001A000F5E52AD6087EFEFF2003E1F1C9FEFE2810\n:1001B000F123CD700118EEFFFFFFFFFFFFFFFFFFF0\n:1001C00021DF08CB462007CBC6CB8EC37803CB8676\n:1001D000CBCEC37803FFFFFFC50680CDA00210FB86\n:1001E000C1C9FFFFED4BD208CD9004CD7002C3789A\n:1001F00003FFED4BD408CD9004CD7002C37803FF0C\n:10020000ED73E808310009F5C5D5E5DDE5FDE50844\n:10021000D9F5C5D5E5ED57F5AF32CC0832CD083E5E\n:10022000FF32E008C34002FFFFFFFFFFFFFFFFFFB9\n:10023000FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFCE\n:1002400031C008AFD301D30221B00011D808010595\n:1002500000EDB0CD70023E08CD70013E0FCD7001B3\n:100260003E0132DF08CDA002CD600318F8FFFFFF8A\n:10027000F5E5C5CD8902E6F00F0F0F0F32DC080A55\n:10028000E60F32DD08C1E1F1C921D8087E07070772\n:1002900007238647237E0707070723864F0AC9FFE0\n:1002A000F5E5D5C511D808AFD301CD5003CB4E2805\n:1002B00002CBE7D3023E20D301062010FEAFD301CC\n:1002C000CD5003CB4E2802CBE7D3023E10D301061C\n:1002D0002010FEAFD301CD5003CB4E2802CBE7D385\n:1002E000023E08D301062010FEAFD301CD5003CB50\n:1002F0004E2802CBE7D3023E04D301062010FEAF06\n:10030000D30100C31803FFFFFFFFFFFFCD8902C524\n:10031000E131C008E9FFFFFFCD5003CB462802CBF7\n:10032000E7D3023E02D301062010FEAFD301CD5029\n:1003300003CB462802CBE7D3023E01D301062010AF\n:10034000FEAFD301C1D1E1F1C9FFFFFFFFFFFFFF06\n:100350002180001A856F7E1321DF08C9FFFFFFFF90\n:10036000F5E521E0083EFFBE280E7EE61FCB6E209D\n:1003700002C614C3A803FFFFE1F1C9FFFFE1F1C901\n:10038000FFFFFFFFCD8902C5DDE1DD23DDE5E17C77\n:10039000FE402808DD7E00DD77FF18EE3E0032FFCC\n:1003A0003FCD7002C37803FFC601CD7001C32104A5\n:1003B000CD89020BDD21FE3FDD7E00DD7701DD2BE7\n:1003C000DDE5E179BD20F178BC20EDDD360100CD21\n:1003D0007002C37803FFFFFFE5F5DDE5C5AF32DF4F\n:1003E00008060621D8083E29772310FC2AD0087E6B\n:1003F000FEFF2006C1DDE1F1E1C9FEFE28EEDD21B0\n:10040000D8080605DD7E01DD7700DD2310F67E329B\n:10041000DD08230640CDA00210FB18D3FFFFFFFF2D\n:10042000FFD60136FFCB67C2C004CB6FC2C0042128\n:10043000DF08CB46CA550457CD890221DF08CB5EC1\n:100440002003AFCBDE07070707E6F08202CD70027C\n:10045000C37D03FFFF5721DF08CB9ECB6620080139\n:100460000000CD9004CBE6CD89027807070707E6A8\n:10047000F05F7907070707E60F8347790707070744\n:10048000E6F0824FCD9004CD7002C37D03FFFFFFE5\n:10049000F5E521D80878E6F007070707772378E61F\n:1004A0000F772379E6F007070707772379E60F77B9\n:1004B000E1F1C9FFFFFFFFFFFFFFFFFFFFFFFFFFAE\n:1004C00021DF08CB9ECBA6FE10CAE000FE11CAE6D3\n:1004D00000FE12CA0C03FE13CAC001FE14CA500566\n:1004E000FE15CAFFFFFE16CAFFFFFE17CAF201FE85\n:1004F00018CA7005FE19CAFFFFFE1ACAFFFFFE1BCD\n:10050000CAFFFFFE1CCA6006FE1DCAFFFFFE1ECA10\n:10051000FFFFFE1FCAFFFFFE20CAFFFFFE21CAFF2A\n:10052000FFFE22CAFFFFFE23CAFFFFFE24CAB0035C\n:10053000FE25CA8403FE26CAFFFFFE27CAE401C3C4\n:100540007803FFFFFFFFFFFFFFFFFFFFFFFFFFFF3E\n:10055000CD890260693AE10823BE20FC444DCD906C\n:1005600004C35302FFFFFFFFFFFFFFFFFFFFFFFF7B\n:10057000FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF8B\n:10058000FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF7B\n:10059000FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF6B\n:1005A000FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF5B\n:1005B000FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF4B\n:1005C000FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF3B\n:1005D000FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF2B\n:1005E000FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF1B\n:1005F000FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF0B\n:10060000FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFA\n:10061000FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFEA\n:10062000FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFDA\n:10063000FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFCA\n:10064000FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFBA\n:10065000FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFAA\n:10066000FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF9A\n:10067000FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF8A\n:10068000FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF7A\n:10069000FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF6A\n:1006A000FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF5A\n:1006B000FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF4A\n:1006C000FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF3A\n:1006D000FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF2A\n:1006E000FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF1A\n:1006F000FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF0A\n:10070000FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF9\n:10071000FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFE9\n:10072000FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFD9\n:10073000FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFC9\n:10074000FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFB9\n:10075000FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFA9\n:10076000FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF99\n:10077000FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF89\n:10078000FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF79\n:10079000FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF69\n:1007A000FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF59\n:1007B000FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF49\n:1007C000FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF39\n:1007D000FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF29\n:1007E000FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF19\n:1007F000FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF09\n:00000001FF\n`;","export const ROM =\n`:10000000226E082A28081863E728FD000000000077\n:10001000E720FDE61FED47C9E5D5CD3608D1E10063\n:10002000C50620CDAD06C1C9E3225808E3FBC9FFD0\n:10003000DB040738FBC9FFFFC31203FFFFFFFFFF0D\n:10004000FFC3DD03C37904C3ED03C39F06C3B60535\n:10005000C3A304FFFFFFFFFFFFFFFFFFFFFF2A2EE9\n:1000600008225808FBE9ED45FFFFFFED56222E0858\n:10007000217600C31803312008CDF702E728073A9C\n:10008000FF08FEAA281C210F07112008012B00EDF4\n:10009000B006033EC91213131310FACDD506AF32C2\n:1000A000FF082100387EFEC3CC0038CD3C08AF32BB\n:1000B0002B082A2E08ED4B2C08CD30087ECD3308B6\n:1000C000CD3908CD42082A2E084F3A2B08CB674776\n:1000D00079202FFE10200C23222E0878E6FC322BEC\n:1000E0000818CFFE1120032B18EEFE1220143A231D\n:1000F00008FEAA28052A2E0818032A2808114508F0\n:10010000D5E9FE13200B78CB682002EE10E6D31859\n:10011000CB78CB672025DB00CB6F283478E603FE55\n:100120000278200EF53A2708B7200423222E08F182\n:10013000E6FC3C322B083A200818113A2008CB671D\n:10014000202FCB68200A212E08ED6F23ED6F189128\n:1001500078E60C21DE07280A21BE08FE04280321C8\n:100160001E383A20083C47232310FC5E2356EB1828\n:100170008CE6030707F6204F78E6D3B1322B081838\n:10018000CDCD4808CD4B08CD3608CD4E08212008EE\n:10019000CB7ECBBEC0E7212A083804368018E8CDD4\n:1001A000CA06CB7E20103520DE360CCD5108CD3F5F\n:1001B00008AF3A2008C9367018F106202A2C087EAC\n:1001C000D30278D301064010FE2347AFD301CB08FA\n:1001D00030EDD302C97CCD33087DF507070707CD85\n:1001E000E301F1E60F11D007835F1A0203C906028B\n:1001F0002A2C083A2B08CB67281ACB6F2008060454\n:10020000CBE62310FBC905CB5F2006CB572001238B\n:10021000232318EC234F3A2708B720F3CB4928EFC4\n:10022000230518EBCD3F083A2208B7C00E402E3107\n:10023000AFD3014110FEEE802D20F6C93A2108B758\n:10024000C03E80D304F7CD53023EC0D304F7CD5A4D\n:100250000218332A2E087DE6F86FCD6C0206043EA4\n:1002600020D384F77ECD71022310F4C97CCD7102B6\n:100270007DF50F0F0F0FCD7A02F1E60FC69027CE56\n:100280004027D384F7C93A2E08E6074F3A2708B724\n:100290003A2B08572005CB4F28010C7921BD078543\n:1002A0006F7ED304F73E3ED384F73EC0D304F77A83\n:1002B0000F0F57E60C21AD07856FFEB901840428A6\n:1002C00006EDA3F720FBC90603CDC1027AE603C6FB\n:1002D0003118AF1104002A2E0819222E08C911FC6A\n:1002E000FF18F311FFFF18EE11010018E9110800C3\n:1002F00018E411F8FF18DF3AB008FEAAC0ED4BB3BE\n:10030000082AB108AF862310FC21B508BEC02AB662\n:1003100008E92270082144032260082A580822684C\n:1003200008ED737E08E1225808317E0808D9E5D52A\n:10033000C5F5FDE5DDE508D93B3BD5C5F52A6008E7\n:10034000E9316A08210608222C083B3B3E01325A5B\n:10035000083A5A0821FEFF3923233D20FB7E2366FD\n:100360006FED4B2C08CD30083A5A08C5D101020078\n:10037000219207093D20FCEDB0DF212408280BCB9A\n:100380007E20F63520F3363018224736FF215A08F2\n:1003900078FE102008347EFE0D38B618AFFE11200E\n:1003A000073520AD360C18A9FE12201AE728FDE10A\n:1003B000F1C1D1E1DDE1FDE108D9F1C1D1E108D917\n:1003C000ED7B7E08FBC9FE132001C73E20322408C6\n:1003D00018A7217C07118008011800EDB021000842\n:1003E000222C083A8F08ED5B95082A930801040037\n:1003F000B728060913133D20FAE5D5110008EDB022\n:10040000E10E02EDB0E1CD4208218F08CDB2042803\n:1004100005CD970818CD2A91083A8F08B7280623EA\n:1004200023233D20FAE9AF328A083E0121FFFF2253\n:100430009A08213105180D3E0218EC3E0318FA21E6\n:1004400050043E03228808328708AF3286081823FA\n:100450002A9E0822AA082A9A0822A608EB2A9C08A3\n:10046000B7ED5223DA4A0022A8082A980822A408E5\n:10047000C3F00421FFFF229E083A86082A8408ED73\n:100480005B8208B72807131323233D20F9228C0829\n:10049000EB7E23666F220408EB7E2B6E670100085B\n:1004A000CD3008CD4208218608CDB20420162A8816\n:1004B00008E9FE10281BFE112817FE132002E1C9CF\n:1004C000FE123FC938B32A8C082BED6F23ED6F184D\n:1004D000A84F23462B0F7E38023C3C3D04B8300524\n:1004E00077AF3D37C9CB412003AF18F4057818F03A\n:1004F000210030CD800621A408060CAFCD4B06218B\n:100500000050CD84062AA608ED4BA808CDC90520C9\n:100510000578B72811AFF5D9211402CD8406D9AFDB\n:10052000CD4B06F120E2210010CD84063E05C3E646\n:1005300003010010CD300638F80B78B120F6060C18\n:1005400021A408CD300630FBCDE70520540100087A\n:100550002AA408CD30083E4732050801F201C5CD76\n:100560003608C10B78B120F62A9808237CB52B28D1\n:1005700009ED5BA408B7ED5220B72A9A08237CB591\n:100580002B20032AA608ED4BA808CDC90520057825\n:10059000B7280AAFF5CDE3052006F120E9AF180131\n:1005A000D120112AAA08237CB52B28073A8A08B73C\n:1005B0002001E9AF116807215C0720022E583A8F0D\n:1005C0000807835F00AFC3470078E60F11D00783A9\n:1005D0005F1AD30278B7280905ED43A8080600B7CB\n:1005E000C941C93A8A084FAFF5CD0B06CB49200E59\n:1005F0007323F18310F2F5CD0B06F11DBBC9CB417E\n:1006000028F0F1577BBE237A28E9C9CD18061608D1\n:10061000CD1806CB1B1520F8D9210000CD300638A7\n:10062000062D2DCBC418F52CCB4428F0CB15D9C9F9\n:10063000110000DB03131730FAAFD301DB031317EC\n:1006400038FA3E84D3017BFE1AC9085E8308CD5771\n:10065000062310F6083C5F1608B7CD6606CB1BCD07\n:1006600066061520F837D9260038092E10CD8406E5\n:100670002E0418072E08CD84062E08CD8006D9C971\n:100680000E2918020E113A8F08B72002CB3D110136\n:10069000003E84D3014110FEEE80ED5220F5C921C9\n:1006A0005207110008010600EDB0C35000DB03CB78\n:1006B00077280810F8AF3225083DC93A2508B72039\n:1006C0000010F83720F43D322508DB00E61FCB7F11\n:1006D00037322008C921B5070104041100051B7A2F\n:1006E000B320FBEDA320F410FEDB84D620322108DA\n:1006F000C9FFFFFFFFFFFFFFFFFFFFFFFFFFFFFF40\n:10070000C33F04C33F04C33B04C33704C3260400F0\n:100710000000FFFF00FF00000A700000080009C38E\n:10072000D501C3DA01C3BA01C3EE01C32402C32752\n:1007300002C38101C3B200C33C02A76FEAC7A76F1F\n:10074000EAC7C6C7A7C6C6C7A7C6C2EB6FEC04C731\n:1007500064EC04C7444428644F6FA7A7476F28C2BE\n:10076000046E04C2E6C2C3A704C604A7C6E6C3A7B4\n:10077000C2ECFFFFFFFFFFFFFFFFFFFF00FFC60709\n:1007800099080003FFFFFFFFFFFFFF000400073A87\n:10079000076007C94FC36F47E6C3ECC76EC2286E38\n:1007A00028AE7F57F6D3FCD77ED2A74FFF446174A3\n:1007B00061416464723801060C46732DFF84878A98\n:1007C0008DC4C7CACD80044704A704C704E3FFFF54\n:1007D000EB28CDAD2EA7E729EF2F6FE6C3ECC74777\n:1007E000D203E3025E00FFFFD302AE00DE0241034C\n:1007F000ED00E802F202FFFFFFFFFFFFFFFFFFFF38\n:00000001FF\n`;","export const ROM =\n`:10000000C38005FFFFFFFFFFC32003FFFFFFFFFFCC\n:10001000C3E003FFFFFFFFFFC39004FFFFFFFFFFED\n:10002000FFFFFFFFFFFFFFFF213002C34100FFFF83\n:10003000213005C34100FFFF21D102220008C37017\n:1000400002220008C3B001FFFFFFFFFFFFFFFFFF19\n:10005000FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFB0\n:10006000FFFFFFFFFFFFDB00E61FED47C931F00F89\n:10007000CD3101CD8E013AF90FFE00C29600ED5749\n:10008000FE10DA8800C3E30021F70FCD6F01ED6F9A\n:1000900023ED6FC3DA00ED57FE10DAB700AF32FA86\n:1000A0000FED57FE13CADA00FE12CAC200FE11CAD3\n:1000B000C600FE10CAD0002AF70FCD7B01ED6FC33A\n:1000C000E3002AF70FE92AF70F2B22F70FC3E3000B\n:1000D0002AF70F2322F70FC3E3003E00060421F3A3\n:1000E0000F18073E67060221F10F32F90FD9ED5BB9\n:1000F000F70FCD02011ACD0E01D9CBE62310FBC3B9\n:100100006D0021F30F7BCD15017ACD1501C921F1C9\n:100110000FCD1501C9F5CD26017723F10F0F0F0F74\n:10012000CD26017723C9E5215F01E60F856F7EE1CA\n:10013000C93EFFED47CD4001ED57FEFFC0C3310181\n:10014000DDE5010106DD7E00D302DD2379D301CB9D\n:10015000274F3E0A3DC25401D30110E9DDE1C9EB4E\n:1001600028CDAD2EA7E729EF2F6FE6C3ECC747CD0B\n:100170007B01C0233E00772BED57C9ED57473AFA74\n:100180000FFE0078C0AF773D32FA0F78C9000E0A33\n:1001900021500029110100AFD3023DD3014110FECF\n:1001A000EE80ED5220F5C9FFFFFFFFFFFFFFFFFFCD\n:1001B000ED5B00081AE61FFE1FC80000FE1ECAB055\n:1001C00001FE00CAE9014713D521F801CDE301F58D\n:1001D00078211002CDE3016F2600F14FCD9301D1BC\n:1001E000C3B4015F1600197EC9D51100101B7AB384\n:1001F000C2ED01D113C3B4018C837C757067625C5E\n:1002000057524E4845413C3936322F2C2A27252358\n:10021000191A1C1D1E20232527292C2E3133373A6D\n:100220003D4145494D52575C10FFFFFFFFFFFFFF67\n:1002300006060A0D060D0A0D121614120F11120FE2\n:100240000D0D0D0A120F0D0A0806080A0F0A0D0FF0\n:1002500006060A0D060D0A0D121614120F11120FC2\n:100260000D0D0D0A120F0D0A0806080A0612001ECF\n:10027000FD2A0008DD21F10F060621F10F360023CB\n:1002800010FB060611F70F21F60F7E122B1B10FA3A\n:10029000FD7E00FD23E61FFE1FC8FE1E28D221B3EF\n:1002A00002CDE30132F10F3E80F5CD4001F13D205A\n:1002B000F818CF006FE6C3ECC747E36E28E8CEC25C\n:1002C00064EB4F2F44A746E0A9AECD041018000000\n:1002D0000008050C0C0E0013080511050013080991\n:1002E0001200091200130805001305031809191953\n:1002F000191904051209070D0504000216000A0E5B\n:10030000080D00080111041600060E110013051A4D\n:100310000000000000001EFFFFFFFFFFFFFFFFFFC8\n:10032000DD21F10FAF32FA0F32FB0F060621F10F7C\n:1003300036002310FB3AF50FFE00203711F50F2190\n:10034000F40F06047E122B1B10FAED5FCDB50332BD\n:10035000F10F3E0000F53EFFED473AFB0FCDB50330\n:1003600032F60FCD4001ED57FEFFC48E03F13D2064\n:10037000E418C2CD8E01060621F10F36002310FBD2\n:100380003AFA0F21F30FCD1501CD31011892FE106D\n:1003900020083AFB0F3C32FB0FC93AF60F4F21F50C\n:1003A0000F06057EB9200A36003AFA0F3C2732FACA\n:1003B0000F2B10EFC9E607CD2601C9160E14000C4D\n:1003C0000E1205001213140F09041A1F0E08000D57\n:1003D0000E19191909000C0E12131A1FFFFFFFFF47\n:1003E000DD21F10F3E2332FA0F21F10F0606360010\n:1003F0002310FB1E00CD6604CD3101ED57FE043005\n:10040000F4FE0028F05F3AFA0FBB284438429327E5\n:1004100032FA0FCD660421F60F36AE1600CD40013C\n:100420001520FA3AFA0FFE01282C3D27D604273072\n:10043000FBC60427FE0028105F3AFA0F932732FA12\n:100440000F21F60F362818ADED5FE603282818E8CF\n:1004500011BB03C3590411CC03ED530008CD700246\n:10046000CD3101C3E00321F10F3AFA0FCD1501237D\n:100470007BCD260177C93CC33804FF14121417172B\n:100480001214101F0111011101111FFFFFFFFFFFC7\n:10049000DD21F10FFD2100083E50FD77003E20FDDB\n:1004A0007701AFFD770221F10F060636002310FB1E\n:1004B0001680FD7E0121F10FCD15012323FD7E0065\n:1004C000CD15013EFFED47CD4001ED57FEFFC4F3D2\n:1004D0000415C2B204FD7E02D60127FD770247FD56\n:1004E0007E008027FE00CA1105FE60301BFD7700EC\n:1004F000C3B004FD7E01FE00C83D27FD7701FD7EEF\n:1005000002C60227FD7702C9118404DD210000180C\n:1005100003117B04ED530008CDB001CD3101C39030\n:1005200004FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFD6\n:100530000B0A080A0A0A0606060B0A080A0A0A0A29\n:100540000A0A0B0A080A0A0A0606060A080A0D0D14\n:100550000D0D0D000D05080B0B0B0606060B0A080A\n:100560000A0A0A0606060B0A0608080808080A0B03\n:100570000A080606060606060000001EFFFFFFFF2B\n:1005800021000831F00FDD21F10F22F70FAF32F912\n:100590000F32FA0F0E0A215000CD93010E202130A8\n:1005A00000CD9301C3E300FFFFFFFFFFFFFFFFFF4D\n:1005B000FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF4B\n:1005C000FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF3B\n:1005D000FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF2B\n:1005E000FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF1B\n:1005F000FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF0B\n:10060000FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFA\n:10061000FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFEA\n:10062000FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFDA\n:10063000FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFCA\n:10064000FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFBA\n:10065000FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFAA\n:10066000FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF9A\n:10067000FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF8A\n:10068000FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF7A\n:10069000FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF6A\n:1006A000FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF5A\n:1006B000FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF4A\n:1006C000FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF3A\n:1006D000FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF2A\n:1006E000FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF1A\n:1006F000FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF0A\n:10070000FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF9\n:10071000FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFE9\n:10072000FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFD9\n:10073000FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFC9\n:10074000FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFB9\n:10075000FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFA9\n:10076000FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF99\n:10077000FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF89\n:10078000FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF79\n:10079000FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF69\n:1007A000FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF59\n:1007B000FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF49\n:1007C000FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF39\n:1007D000FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF29\n:1007E000FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF19\n:1007F000FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF09\n:00000001FF\n`;\n","import { html } from 'lit-html'\nimport { withProps, isHidden, addVisibilityListener, removeVisiblityListener } from '../util';\nimport tec1Image from '../../assets/TEC-1.jpg';\nimport {audioInit, audioPlay, audioValue} from '../util/audio';\n// @ts-ignore: Module '\"nrf-intel-hex\"' has no default export\nimport MemoryMap from 'nrf-intel-hex';\n\ninterface Message {\n    type: string;\n}\n\ninterface MemoryMessage extends Message {\n    type: 'POST_MESSAGE';\n    from: number;\n    size: number;\n    buffer: ArrayBuffer;\n}\n\ninterface CPUMessage extends Message {\n    type: 'POST_OUTPORTS';\n    buffer: ArrayBuffer;\n    display: ArrayBuffer;\n    wavelength: any;\n}\n\ninterface KeyMap {\n    [key: string]: number | null;\n}\n\nconst keyMap:KeyMap = {\n    Digit0: 0x00, Digit1: 0x01, Digit2: 0x02, Digit3: 0x03,\n    Digit4: 0x04, Digit5: 0x05, Digit6: 0x06, Digit7: 0x07,\n    Digit8: 0x08, Digit9: 0x09,\n    KeyA: 0x0A, KeyB: 0x0B, KeyC: 0x0C, KeyD: 0x0D,\n    KeyE: 0x0E, KeyF: 0x0F,\n    Space: 0x13, Tab: 0x13,\n    Enter: 0x12, Minus: 0x11,\n    ArrowDown: 0x11, ArrowUp: 0x10,\n};\n\ninterface AppRootProps {\n    digits: number[];\n    segments: number[];\n    display: number[];\n    shiftLocked: boolean;\n}\n\nconst anchor = document.createElement('a');\n\nexport const Tec1App = withProps({\n\n    init: function () {\n        this.digits = 0;\n        this.segments = 0;\n        this.display = Array(6).fill(0);\n        this.handleVisibility = this.handleVisibility.bind(this);\n        this.handleKeyDown = this.handleKeyDown.bind(this);\n        this.classic = localStorage.getItem('classic') === 'true';\n        this.speed = localStorage.getItem('speed');\n        this.shiftLocked = false;\n    },\n\n    onconnected() {\n        this.worker = new Worker('../worker/worker.ts');\n        this.worker.onmessage = (event: { data: CPUMessage | MemoryMessage }) => {\n            if (event.data.type === 'POST_OUTPORTS') {\n                const {\n                        buffer,\n                        display,\n                        wavelength,\n                } = event.data;\n                let view = new Uint8Array(buffer);\n                this.digits = view[1];\n                this.segments = view[2];\n                this.requestRender();\n                this.display = [...new Uint8Array(display)];\n                this.wavelength = wavelength;\n                this.frequency = this.wavelength ? 500000/this.wavelength : 0;\n                audioValue(this.frequency);\n            }\n            else {\n                const {\n                    from,\n                    buffer,\n                } = event.data;\n                let memMap = new MemoryMap();\n                let bytes = new Uint8Array(buffer);\n                memMap.set(from, bytes);\n\n                anchor.download = `TEC-1-${(new Date).getTime()}.hex`;\n                let hexString = memMap.asHexString();\n                anchor.href = URL.createObjectURL(new Blob([hexString], {type: 'application/octet-stream'}));\n                anchor.dataset.downloadurl = ['text/plain', anchor.download, anchor.href].join(':');\n                anchor.click();\n            }\n        }\n        this.worker.postMessage({ type: 'INIT' });\n        this.postSpeed(this.speed);\n        this.handleChangeROM('MON-1');\n\n        document.addEventListener(\"keydown\", this.handleKeyDown);\n        document.addEventListener(\"keyup\", this.handleKeyUp);\n        addVisibilityListener(this.handleVisibility);\n    },\n\n    ondisconnected() {\n        this.worker.terminate();\n        document.removeEventListener(\"keydown\", this.handleKeyDown);\n        document.removeEventListener(\"keyup\", this.handleKeyDown);\n        removeVisiblityListener(this.handleVisibility);\n    },\n\n    handleVisibility() {\n        console.log('isHidden', isHidden());\n        audioPlay(!isHidden());\n        this.worker.postMessage({ type: 'HIDDEN', value: isHidden() });\n    },\n\n    handleKeyDown(event: any) {\n\n        if (this.handleCode(event.code, event.shiftKey)) {\n            event.preventDefault();\n        }\n        else {\n            console.log(event, event.code, event.key);\n        }\n    },\n\n    handleButton(event: any) {\n        // console.log(event.detail)\n        const {code, eventType} = event.detail;\n        const pressed = eventType === 'mousedown';\n        if (this.handleCode(code, pressed, event.shiftKey)) {\n            event.preventDefault();\n        }\n    },\n\n    handleCode(code:string, pressed:boolean, shiftKey:boolean) {\n        audioInit();\n        pressed;\n        if (code === 'Escape') {\n            this.worker.postMessage({ type: 'RESET' });\n            return true;\n        }\n        else if (code === 'ShiftLock') {\n            if (pressed) this.shiftLocked = !this.shiftLocked;\n            return true;\n        }\n        else if (code in keyMap) {\n            let keyCode = keyMap[code];\n            if (keyCode == null)\n                return false;\n            if (shiftKey) {\n                this.shiftLocked = true;\n            }\n            const bit5 = 0b00100000;\n            const mask = ~bit5;\n            let keyCode1 = keyCode & mask;\n            if (!this.shiftLocked) keyCode1 = keyCode1 | bit5;\n            this.shiftLocked = false;\n            this.worker.postMessage({ type: 'SET_INPUT_VALUE', port: 0, value: keyCode1 });\n            this.worker.postMessage({ type: 'SET_KEY_VALUE', code: keyCode1, pressed });\n            if (pressed) this.worker.postMessage({ type: 'NMI' });\n            return true;\n        }\n        return false;\n    },\n\n    handleChangeROM(name:string) {\n        const p:Promise<{ROM:string}> =\n            (name == 'MON-1A') ? import('../roms/MON-1A') :\n            (name == 'MON-1B') ? import('../roms/MON-1B') :\n            (name == 'MON-2') ? import('../roms/MON-2') :\n            (name == 'JMON') ? import('../roms/JMON') :\n            import('../roms/MON-1');\n        p.then((result) =>\n            this.worker.postMessage({ type: 'UPDATE_MEMORY', value: result.ROM })\n        );\n    },\n\n    handleUpload(event: any) {\n        const files = event.target.files;\n        if (files == null || files.length === 0) return;\n        const file = files[0];\n        const reader = new FileReader();\n        reader.onload = () =>\n            this.worker.postMessage({ type: 'UPDATE_MEMORY', value: reader.result });\n        reader.readAsText(file);\n    },\n\n    handleDownload() {\n        const pfrom = window.prompt('Start address (hex)', '0800');\n        const psize = window.prompt('Size (hex)', '1000');\n        if (pfrom != null && psize != null) {\n            const from = parseInt(pfrom, 16);\n            const size = parseInt(psize, 16);\n            this.worker.postMessage({ type: 'READ_MEMORY', from, size });\n        }\n    },\n\n    postSpeed(speed: string) {\n        this.worker.postMessage({ type: 'SET_SPEED', value: speed });\n    },\n\n    render({ digits, segments, display, shiftLocked }:AppRootProps) {\n        return html`\n<style>\n    #tec1 {\n        width: 600px;\n        height: 375px;\n        background-image: url(${tec1Image});\n        background-size: 100% 100%;\n        position: relative;\n    }\n</style>\n<div style=\"display:inline-block\">\n    <div style=\"display:flex; justify-content:space-between; align-items: center; margin: 3px\">\n        <div>\n            <label for=\"file-upload\">HEX</label>\n            <input id=\"file-upload\" type=\"file\" accept=\".hex\" @change=${(event: any) => this.handleUpload(event)}>\n        </div>\n        <button @click=${() => this.handleDownload()}>Download</button>\n    </div>\n    <div id=\"tec1\">\n        ${  this.classic ?\n            html`<div is=\"keypad-classic\" @button=${(event: any) => this.handleButton(event)}></div>` :\n            html`<div is=\"keypad-modern\" @button=${(event: any) => this.handleButton(event)}></div>`\n        }\n        <div\n            is=\"key-button\"\n            .code=${'Escape'}\n            .text=${'R'}\n            .color=${'#cd3d45'}\n            .left=${349}\n            .top=${301}\n            @button=${(event: any) => this.handleButton(event)}>\n        </div>\n\n        <div\n            is=\"key-button\"\n            .code=${'ShiftLock'}\n            .text=${'SH'}\n            .color=${ shiftLocked ? '#d8696f' : '#cd3d45'}\n            .left=${386}\n            .top=${333}\n            @button=${(event: any) => this.handleButton(event)}>\n        </div>\n\n        <div id=\"digit-pane\">\n            <div id=\"seven\" is=\"seven-seg-display\" .digits=${digits} .segments=${segments} .display=${display}></div>\n        </div>\n    </div>\n    <div style=\"display:flex; justify-content:space-between; align-items: center; margin: 3px\">\n        <div>\n            <label for=\"rom-select\">ROM</label>\n            <select id=\"rom-select\" @change=${(event: any) => this.handleChangeROM(event.target.value)}>\n                <option>MON-1</option>\n                <option>MON-1A</option>\n                <option>MON-1B</option>\n                <option>MON-2</option>\n                <option>JMON</option>\n            </select>\n        </div>\n        <div>\n            <input\n                id=\"key-layout\"\n                type=\"checkbox\"\n                ?checked=${this.classic}\n                @change=${(event: any) => {\n                    this.classic = event.target.checked;\n                    localStorage.setItem('classic', String(this.classic))\n                }}\n                >\n            <label for=\"key-layout\">original key layout</label>\n        </div>\n        <div>\n            <label for=\"speed\">Speed</label>\n            Speed\n            <input\n            id=\"speed\"\n                type=\"range\"\n                min=\"0\"\n                max=\"99\"\n                value=${this.speed || \"50\"}\n                @change=${(event: any) => {\n                    this.speed = event.target.value;\n                    localStorage.setItem('speed', String(this.speed))\n                    this.worker.postMessage({ type: 'SET_SPEED', value: this.speed });\n                    this.postSpeed(this.speed);\n                }}\n                >\n        </div>\n    </div>\n    <p>MON 1 Restart:</p>\n    <div style=\"display:flex; justify-content:space-between\">\n        <div>\n            <div>CF (RST 1)\tINVADERS</div>\n            <div>D7 (RST 2)\tNIM</div>\n            <div>DF (RST 3)\tLUNALANDER</div>\n        </div>\n        <div>\n            <div>EF (RST 5)\tTUNE 1 Bealach An Doirín</div>\n            <div>F7 (RST 6)\tTUNE 2 Biking up the Strand</div>\n        </div>\n    </div>\n</div>\n`;\n    },\n});\n","import { html } from 'lit-html'\nimport { withProps } from '../util';\n\ninterface SevenSegDisplayProps {\n    display: number[];\n}\n\nexport const sevenSegDisplay = withProps({\n\n    init() {\n        this.display0 = Array(6).fill(0);\n        this.display = [...this.display0];\n        this.blanks = 0\n    },\n\n    get observedProperties() {\n        return ['digits', 'segments', 'display'];\n    },\n\n    render({ display }:SevenSegDisplayProps) {\n        return html`\n<div style=\"white-space: nowrap;\">${display.map((segs:number, index:number) => html`\n<span is=\"seven-seg\" style=${index == 1 ? 'margin-left:2.2%' : ''} .segments=${segs}>\n</div>`)}</span>\n`;\n    },\n\n});\n","import { html } from 'lit-html'\nimport { withProps } from '../util';\n\nconst getFill = (segments:number, mask:number) => segments & mask ? 'red' : '#320000';\n\ninterface SevenSegProps {\n    segments: number;\n}\n\nexport const sevenSeg = withProps({\n\n    get observedProperties() {\n        return ['segments'];\n    },\n\n    render({ segments }:SevenSegProps) {\n        return html`\n            <div style=\"display:inline-block;width:4.34%;margin-left:1.6%;\">\n                <svg xmlns=\"http://www.w3.org/2000/svg\" viewBox=\"0 -1 12 20\">\n                    <g class=\"digit\">\n                        <polygon fill=${getFill(segments, 0x01)} points=\" 1, 1  2, 0  8, 0  9, 1  8, 2  2, 2\" />\n                        <polygon fill=${getFill(segments, 0x08)} points=\" 9, 1 10, 2 10, 8  9, 9  8, 8  8, 2\" />\n                        <polygon fill=${getFill(segments, 0x20)} points=\" 9, 9 10,10 10,16  9,17  8,16  8,10\" />\n                        <polygon fill=${getFill(segments, 0x80)} points=\" 9,17  8,18  2,18  1,17  2,16  8,16\" />\n                        <polygon fill=${getFill(segments, 0x40)} points=\" 1,17  0,16  0,10  1, 9  2,10  2,16\" />\n                        <polygon fill=${getFill(segments, 0x02)} points=\" 1, 9  0, 8  0, 2  1, 1  2, 2  2, 8\" />\n                        <polygon fill=${getFill(segments, 0x04)} points=\" 1, 9  2, 8  8, 8  9, 9  8,10  2,10\" />\n                        <circle fill=${getFill(segments, 0x10)} cx=\"11\" cy=\"17\" r=\"1\" />\n                    </g>\n                </svg>\n            </div>\n        `;\n    },\n});\n","import { html } from 'lit-html'\nimport { withProps } from '../util';\n\ninterface KeyButtonProps {\n    code: string;\n    text: string;\n    color: string;\n    left: number;\n    top: number;\n}\n\nexport const keyButton = withProps({\n\n    init(){\n\n    },\n\n    handleEvent(buttonEvent:any) {\n        const { type } = buttonEvent;\n        const event = new CustomEvent('button', {\n            detail: {\n                eventType: type,\n                code: this.code,\n            },\n        });\n        this.element.dispatchEvent(event);\n    },\n\n    get observedProperties() {\n        return ['code','text','color','left','top'];\n    },\n\n    render({ text, color, left, top }: KeyButtonProps) {\n        this.element.style = `background-color:${color};left:${left}px;top:${top}px`;\n        return html`\n            <div\n                @mousedown=${(event:any) => this.handleEvent(event)}\n                @mouseup=${(event:any) => this.handleEvent(event)}>\n                    <div>${text}</div>\n            </div>\n        `;\n    },\n});\n","import { html } from 'lit-html'\nimport { withProps } from '../util';\nexport const keyPadClassic = withProps({\n\n    handleButton(buttonEvent: any) {\n        const event = new CustomEvent('button', {\n            detail: buttonEvent.detail,\n        });\n        this.element.dispatchEvent(event);\n    },\n\n    render() {\n        return html`\n<div is=\"key-button\" .code=${'Tab'} .text=${'AD'} .color=${'#cd3d45'} .left=${438} .top=${239} @button=${(event: any) =>\n    this.handleButton(event)}></div>\n<div is=\"key-button\" .code=${'Digit3'} .text=${'3'} .color=${'#efedeb'} .left=${468} .top=${239} @button=${(event: any) =>\n    this.handleButton(event)}></div>\n<div is=\"key-button\" .code=${'Digit7'} .text=${'7'} .color=${'#efedeb'} .left=${500} .top=${239} @button=${(event: any) =>\n    this.handleButton(event)}></div>\n<div is=\"key-button\" .code=${'KeyB'} .text=${'B'} .color=${'#efedeb'} .left=${531} .top=${239} @button=${(event: any) =>\n    this.handleButton(event)}></div>\n<div is=\"key-button\" .code=${'KeyF'} .text=${'F'} .color=${'#efedeb'} .left=${562} .top=${239} @button=${(event: any) =>\n    this.handleButton(event)}></div>\n\n<div is=\"key-button\" .code=${'Enter'} .text=${'GO'} .color=${'#cd3d45'} .left=${438} .top=${270} @button=${(event: any) =>\n    this.handleButton(event)}></div>\n<div is=\"key-button\" .code=${'Digit2'} .text=${'2'} .color=${'#efedeb'} .left=${468} .top=${270} @button=${(event: any) =>\n    this.handleButton(event)}></div>\n<div is=\"key-button\" .code=${'Digit6'} .text=${'6'} .color=${'#efedeb'} .left=${500} .top=${270} @button=${(event: any) =>\n    this.handleButton(event)}></div>\n<div is=\"key-button\" .code=${'KeyA'} .text=${'A'} .color=${'#efedeb'} .left=${531} .top=${270} @button=${(event: any) =>\n    this.handleButton(event)}></div>\n<div is=\"key-button\" .code=${'KeyE'} .text=${'E'} .color=${'#efedeb'} .left=${562} .top=${270} @button=${(event: any) =>\n    this.handleButton(event)}></div>\n\n<div is=\"key-button\" .code=${'ArrowDown'} .text=${'-'} .color=${'#cd3d45'} .left=${438} .top=${301} @button=${(event: any) =>\n    this.handleButton(event)}></div>\n<div is=\"key-button\" .code=${'Digit1'} .text=${'1'} .color=${'#efedeb'} .left=${468} .top=${301} @button=${(event: any) =>\n    this.handleButton(event)}></div>\n<div is=\"key-button\" .code=${'Digit5'} .text=${'5'} .color=${'#efedeb'} .left=${500} .top=${301} @button=${(event: any) =>\n    this.handleButton(event)}></div>\n<div is=\"key-button\" .code=${'Digit9'} .text=${'9'} .color=${'#efedeb'} .left=${531} .top=${301} @button=${(event: any) =>\n    this.handleButton(event)}></div>\n<div is=\"key-button\" .code=${'KeyD'} .text=${'D'} .color=${'#efedeb'} .left=${562} .top=${301} @button=${(event: any) =>\n    this.handleButton(event)}></div>\n\n<div is=\"key-button\" .code=${'ArrowUp'} .text=${'+'} .color=${'#cd3d45'} .left=${438} .top=${331} @button=${(event:\n    any) => this.handleButton(event)}></div>\n<div is=\"key-button\" .code=${'Digit0'} .text=${'0'} .color=${'#efedeb'} .left=${468} .top=${331} @button=${(event: any) =>\n    this.handleButton(event)}></div>\n<div is=\"key-button\" .code=${'Digit4'} .text=${'4'} .color=${'#efedeb'} .left=${500} .top=${332} @button=${(event: any) =>\n    this.handleButton(event)}></div>\n<div is=\"key-button\" .code=${'Digit8'} .text=${'8'} .color=${'#efedeb'} .left=${531} .top=${332} @button=${(event: any) =>\n    this.handleButton(event)}></div>\n<div is=\"key-button\" .code=${'KeyC'} .text=${'C'} .color=${'#efedeb'} .left=${562} .top=${332} @button=${(event: any) =>\n    this.handleButton(event)}></div>\n        `;\n    },\n});\n","import { html } from 'lit-html'\nimport { withProps } from '../util';\nexport const keyPadModern = withProps({\n\n    handleButton(buttonEvent: any) {\n        const event = new CustomEvent('button', {\n            detail: buttonEvent.detail,\n        });\n        this.element.dispatchEvent(event);\n    },\n\n    render() {\n        return html`\n<div is=\"key-button\" .code=${'Tab'} .text=${'AD'} .color=${'#cd3d45'} .left=${438} .top=${239} @button=${(event: any) =>\n    this.handleButton(event)}></div>\n<div is=\"key-button\" .code=${'Digit7'} .text=${'7'} .color=${'#efedeb'} .left=${468} .top=${239} @button=${(event: any) =>\n    this.handleButton(event)}></div>\n<div is=\"key-button\" .code=${'Digit8'} .text=${'8'} .color=${'#efedeb'} .left=${500} .top=${239} @button=${(event: any) =>\n    this.handleButton(event)}></div>\n<div is=\"key-button\" .code=${'Digit9'} .text=${'9'} .color=${'#efedeb'} .left=${531} .top=${239} @button=${(event: any) =>\n    this.handleButton(event)}></div>\n<div is=\"key-button\" .code=${'KeyA'} .text=${'A'} .color=${'#efedeb'} .left=${562} .top=${239} @button=${(event: any) =>\n    this.handleButton(event)}></div>\n\n<div is=\"key-button\" .code=${'Enter'} .text=${'GO'} .color=${'#cd3d45'} .left=${438} .top=${270} @button=${(event: any) =>\n    this.handleButton(event)}></div>\n<div is=\"key-button\" .code=${'Digit4'} .text=${'4'} .color=${'#efedeb'} .left=${468} .top=${270} @button=${(event: any) =>\n    this.handleButton(event)}></div>\n<div is=\"key-button\" .code=${'Digit5'} .text=${'5'} .color=${'#efedeb'} .left=${500} .top=${270} @button=${(event: any) =>\n    this.handleButton(event)}></div>\n<div is=\"key-button\" .code=${'Digit6'} .text=${'6'} .color=${'#efedeb'} .left=${531} .top=${270} @button=${(event: any) =>\n    this.handleButton(event)}></div>\n<div is=\"key-button\" .code=${'KeyB'} .text=${'B'} .color=${'#efedeb'} .left=${562} .top=${270} @button=${(event: any) =>\n    this.handleButton(event)}></div>\n\n<div is=\"key-button\" .code=${'ArrowDown'} .text=${'-'} .color=${'#cd3d45'} .left=${438} .top=${301} @button=${(event: any) =>\n    this.handleButton(event)}></div>\n<div is=\"key-button\" .code=${'Digit1'} .text=${'1'} .color=${'#efedeb'} .left=${468} .top=${301} @button=${(event: any) =>\n    this.handleButton(event)}></div>\n<div is=\"key-button\" .code=${'Digit2'} .text=${'2'} .color=${'#efedeb'} .left=${500} .top=${301} @button=${(event: any) =>\n    this.handleButton(event)}></div>\n<div is=\"key-button\" .code=${'Digit3'} .text=${'3'} .color=${'#efedeb'} .left=${531} .top=${301} @button=${(event: any) =>\n    this.handleButton(event)}></div>\n<div is=\"key-button\" .code=${'KeyC'} .text=${'C'} .color=${'#efedeb'} .left=${562} .top=${301} @button=${(event: any) =>\n    this.handleButton(event)}></div>\n\n<div is=\"key-button\" .code=${'ArrowUp'} .text=${'+'} .color=${'#cd3d45'} .left=${438} .top=${331} @button=${(event:\n    any) => this.handleButton(event)}></div>\n<div is=\"key-button\" .code=${'Digit0'} .text=${'0'} .color=${'#efedeb'} .left=${468} .top=${331} @button=${(event: any) =>\n    this.handleButton(event)}></div>\n<div is=\"key-button\" .code=${'KeyF'} .text=${'F'} .color=${'#efedeb'} .left=${500} .top=${332} @button=${(event: any) =>\n    this.handleButton(event)}></div>\n<div is=\"key-button\" .code=${'KeyE'} .text=${'E'} .color=${'#efedeb'} .left=${531} .top=${332} @button=${(event: any) =>\n    this.handleButton(event)}></div>\n<div is=\"key-button\" .code=${'KeyD'} .text=${'D'} .color=${'#efedeb'} .left=${562} .top=${332} @button=${(event: any) =>\n    this.handleButton(event)}></div>\n        `;\n    },\n});\n","/**\n * ISC License\n *\n * Copyright (c) 2018, Andrea Giammarchi, @WebReflection\n *\n * Permission to use, copy, modify, and/or distribute this software for any\n * purpose with or without fee is hereby granted, provided that the above\n * copyright notice and this permission notice appear in all copies.\n *\n * THE SOFTWARE IS PROVIDED \"AS IS\" AND THE AUTHOR DISCLAIMS ALL WARRANTIES WITH\n * REGARD TO THIS SOFTWARE INCLUDING ALL IMPLIED WARRANTIES OF MERCHANTABILITY\n * AND FITNESS. IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR ANY SPECIAL, DIRECT,\n * INDIRECT, OR CONSEQUENTIAL DAMAGES OR ANY DAMAGES WHATSOEVER RESULTING FROM\n * LOSS OF USE, DATA OR PROFITS, WHETHER IN AN ACTION OF CONTRACT, NEGLIGENCE\n * OR OTHER TORTIOUS ACTION, ARISING OUT OF OR IN CONNECTION WITH THE USE OR\n * PERFORMANCE OF THIS SOFTWARE.\n */\n\nvar $Event;\n\ntry {\n  new Event('!');\n  $Event = Event;\n} catch(o_O) {\n  try {\n    new CustomEvent('!');\n    $Event = CustomEvent;\n  } catch(o_O) {\n    $Event = function (type) {\n      var e = document.createEvent('Event');\n      e.initEvent(type, false, false);\n      return e;\n    };\n  }\n}\n\nexport default $Event;\n","/**\n * ISC License\n *\n * Copyright (c) 2018, Andrea Giammarchi, @WebReflection\n *\n * Permission to use, copy, modify, and/or distribute this software for any\n * purpose with or without fee is hereby granted, provided that the above\n * copyright notice and this permission notice appear in all copies.\n *\n * THE SOFTWARE IS PROVIDED \"AS IS\" AND THE AUTHOR DISCLAIMS ALL WARRANTIES WITH\n * REGARD TO THIS SOFTWARE INCLUDING ALL IMPLIED WARRANTIES OF MERCHANTABILITY\n * AND FITNESS. IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR ANY SPECIAL, DIRECT,\n * INDIRECT, OR CONSEQUENTIAL DAMAGES OR ANY DAMAGES WHATSOEVER RESULTING FROM\n * LOSS OF USE, DATA OR PROFITS, WHETHER IN AN ACTION OF CONTRACT, NEGLIGENCE\n * OR OTHER TORTIOUS ACTION, ARISING OUT OF OR IN CONNECTION WITH THE USE OR\n * PERFORMANCE OF THIS SOFTWARE.\n */\n\nvar $WeakSet;\n\ntry {\n  $WeakSet = (new WeakSet).constructor;\n} catch(o_O) {\n  try {\n    // IE11 apparently has WeakMap but no WeakSet\n    o_O = ($WeakSet = new WeakMap && function () {\n      this.$ = new WeakMap;\n    }).prototype;\n    o_O.add = function (O) {\n      this.$.set(O, 0);\n      return this;\n    };\n    o_O.has = function (O) {\n      return this.$.has(O);\n    };\n    o_O.delete = function (O) {\n      return this.$.delete(O);\n    };\n  } catch(o_O) {\n    // all other browsers\n    var i = 0;\n    o_O = ($WeakSet = function () {\n      this.$ = ['__', Math.random(), i++, '__'].join('ws');\n    }).prototype;\n    o_O.add = function (O) {\n      if (!this.has(O))\n        Object.defineProperty(O, this.$, {value:true, configurable:true});\n      return this;\n    };\n    o_O.has = function (O) {\n      return this.hasOwnProperty.call(O, this.$);\n    };\n    o_O.delete = function (O) {\n      return delete O[this.$];\n    };\n  }\n}\n\nexport default $WeakSet;\n","/**\n * ISC License\n *\n * Copyright (c) 2018, Andrea Giammarchi, @WebReflection\n *\n * Permission to use, copy, modify, and/or distribute this software for any\n * purpose with or without fee is hereby granted, provided that the above\n * copyright notice and this permission notice appear in all copies.\n *\n * THE SOFTWARE IS PROVIDED \"AS IS\" AND THE AUTHOR DISCLAIMS ALL WARRANTIES WITH\n * REGARD TO THIS SOFTWARE INCLUDING ALL IMPLIED WARRANTIES OF MERCHANTABILITY\n * AND FITNESS. IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR ANY SPECIAL, DIRECT,\n * INDIRECT, OR CONSEQUENTIAL DAMAGES OR ANY DAMAGES WHATSOEVER RESULTING FROM\n * LOSS OF USE, DATA OR PROFITS, WHETHER IN AN ACTION OF CONTRACT, NEGLIGENCE\n * OR OTHER TORTIOUS ACTION, ARISING OUT OF OR IN CONNECTION WITH THE USE OR\n * PERFORMANCE OF THIS SOFTWARE.\n */\n\nexport default Object.assign || function (target) {\n  for (var o, i = 1; i < arguments.length; i++) {\n    o = arguments[i] || {};\n    for (var k in o) {\n      if (o.hasOwnProperty(k))\n        target[k] = o[k];\n    }\n  }\n  return target;\n};\n","// borrowed from https://github.com/WebReflection/dom4/blob/master/src/dom4.js#L361\nvar contains = document.contains || function (el) {\n  while (el && el !== this) el = el.parentNode;\n  return this === el;\n};\n\nexport default contains;\n","var indexOf = [].indexOf;\n\n// borrowed from https://github.com/WebReflection/dom4/blob/master/src/dom4.js#L130\nvar matches = 'matches' in document.documentElement ?\n  function (el, selector) {\n    return el.matches(selector);\n  } :\n  function (el, selector) {\n    return (\n      el.matchesSelector ||\n      el.webkitMatchesSelector ||\n      el.khtmlMatchesSelector ||\n      el.mozMatchesSelector ||\n      el.msMatchesSelector ||\n      el.oMatchesSelector ||\n      fallback\n    ).call(el, selector);\n  };\n\nexport default matches;\n\nfunction fallback(selector) {\n  var parentNode = this.parentNode;\n  return !!parentNode && -1 < indexOf.call(\n    parentNode.querySelectorAll(selector),\n    this\n  );\n}\n","/*! (c) Andrea Giammarchi */\nfunction attributechanged(poly) {'use strict';\n  var Event = poly.Event;\n  return function observe(node, attributeFilter) {\n    var options = {attributes: true, attributeOldValue: true};\n    var filtered = attributeFilter instanceof Array && attributeFilter.length;\n    if (filtered)\n      options.attributeFilter = attributeFilter.slice(0);\n    try {\n      (new MutationObserver(changes)).observe(node, options);\n    } catch(o_O) {\n      options.handleEvent = filtered ? handleEvent : attrModified;\n      node.addEventListener('DOMAttrModified', options, true);\n    }\n    return node;\n  };\n  function attrModified(event) {\n    dispatchEvent(event.target, event.attrName, event.prevValue);\n  }\n  function dispatchEvent(node, attributeName, oldValue) {\n    var event = new Event('attributechanged');\n    event.attributeName = attributeName;\n    event.oldValue = oldValue;\n    event.newValue = node.getAttribute(attributeName);\n    node.dispatchEvent(event);\n  }\n  function changes(records) {\n    for (var record, i = 0, length = records.length; i < length; i++) {\n      record = records[i];\n      dispatchEvent(record.target, record.attributeName, record.oldValue);\n    }\n  }\n  function handleEvent(event) {\n    if (-1 < this.attributeFilter.indexOf(event.attrName))\n      attrModified(event);\n  }\n}\nexport default attributechanged;\n","/*! (c) Andrea Giammarchi */\nfunction disconnected(poly) {'use strict';\n  var CONNECTED = 'connected';\n  var DISCONNECTED = 'dis' + CONNECTED;\n  var Event = poly.Event;\n  var WeakSet = poly.WeakSet;\n  var notObserving = true;\n  var observer = new WeakSet;\n  return function observe(node) {\n    if (notObserving) {\n      notObserving = !notObserving;\n      startObserving(node.ownerDocument);\n    }\n    observer.add(node);\n    return node;\n  };\n  function startObserving(document) {\n    var dispatched = null;\n    try {\n      (new MutationObserver(changes)).observe(\n        document,\n        {subtree: true, childList: true}\n      );\n    }\n    catch(o_O) {\n      var timer = 0;\n      var records = [];\n      var reschedule = function (record) {\n        records.push(record);\n        clearTimeout(timer);\n        timer = setTimeout(\n          function () {\n            changes(records.splice(timer = 0, records.length));\n          },\n          0\n        );\n      };\n      document.addEventListener(\n        'DOMNodeRemoved',\n        function (event) {\n          reschedule({addedNodes: [], removedNodes: [event.target]});\n        },\n        true\n      );\n      document.addEventListener(\n        'DOMNodeInserted',\n        function (event) {\n          reschedule({addedNodes: [event.target], removedNodes: []});\n        },\n        true\n      );\n    }\n    function changes(records) {\n      dispatched = new Tracker;\n      for (var\n        record,\n        length = records.length,\n        i = 0; i < length; i++\n      ) {\n        record = records[i];\n        dispatchAll(record.removedNodes, DISCONNECTED, CONNECTED);\n        dispatchAll(record.addedNodes, CONNECTED, DISCONNECTED);\n      }\n      dispatched = null;\n    }\n    function dispatchAll(nodes, type, counter) {\n      for (var\n        node,\n        event = new Event(type),\n        length = nodes.length,\n        i = 0; i < length;\n        (node = nodes[i++]).nodeType === 1 &&\n        dispatchTarget(node, event, type, counter)\n      );\n    }\n    function dispatchTarget(node, event, type, counter) {\n      if (observer.has(node) && !dispatched[type].has(node)) {\n        dispatched[counter].delete(node);\n        dispatched[type].add(node);\n        node.dispatchEvent(event);\n        /*\n        // The event is not bubbling (perf reason: should it?),\n        // hence there's no way to know if\n        // stop/Immediate/Propagation() was called.\n        // Should DOM Level 0 work at all?\n        // I say it's a YAGNI case for the time being,\n        // and easy to implement in user-land.\n        if (!event.cancelBubble) {\n          var fn = node['on' + type];\n          if (fn)\n            fn.call(node, event);\n        }\n        */\n      }\n      for (var\n        children = node.children,\n        length = children.length,\n        i = 0; i < length;\n        dispatchTarget(children[i++], event, type, counter)\n      );\n    }\n    function Tracker() {\n      this[CONNECTED] = new WeakSet;\n      this[DISCONNECTED] = new WeakSet;\n    }\n  }\n}\nexport default disconnected;\n","/**\n * ISC License\n *\n * Copyright (c) 2018, Andrea Giammarchi, @WebReflection\n *\n * Permission to use, copy, modify, and/or distribute this software for any\n * purpose with or without fee is hereby granted, provided that the above\n * copyright notice and this permission notice appear in all copies.\n *\n * THE SOFTWARE IS PROVIDED \"AS IS\" AND THE AUTHOR DISCLAIMS ALL WARRANTIES WITH\n * REGARD TO THIS SOFTWARE INCLUDING ALL IMPLIED WARRANTIES OF MERCHANTABILITY\n * AND FITNESS. IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR ANY SPECIAL, DIRECT,\n * INDIRECT, OR CONSEQUENTIAL DAMAGES OR ANY DAMAGES WHATSOEVER RESULTING FROM\n * LOSS OF USE, DATA OR PROFITS, WHETHER IN AN ACTION OF CONTRACT, NEGLIGENCE\n * OR OTHER TORTIOUS ACTION, ARISING OUT OF OR IN CONNECTION WITH THE USE OR\n * PERFORMANCE OF THIS SOFTWARE.\n */\n\nimport Event from './poorly/event.js';\nimport WeakSet from './poorly/weakset.js';\nimport assign from './poorly/assign.js';\n\nimport contains from './poly/contains.js';\nimport matches from './poly/matches.js';\n\nimport attributechanged from './3rd/attributechanged.js';\nimport disconnected from './3rd/disconnected.js';\n\nvar bootstrap = true;\n\nvar query = [];\nvar config = [];\nvar waiting = {};\nvar known = {};\n\nvar regularElements = {\n  Event: Event,\n  WeakSet: WeakSet,\n  assign: assign,\n  document: document,\n  define: function (selector, options) {\n    if (bootstrap) {\n      bootstrap = false;\n      init(regularElements.document);\n    }\n    var type = typeof selector;\n    if (type === 'string') {\n      if (-1 < query.indexOf(selector))\n        throw new Error('duplicated: ' + selector);\n      query.push(selector);\n      config.push(options || {});\n      ready();\n      if (selector in waiting) {\n        waiting[selector](config[config.length - 1]);\n        delete waiting[selector];\n      }\n    } else {\n      if (type !== \"object\" || selector.nodeType !== 1)\n        throw new Error('undefinable: ' + selector);\n      setupListeners(selector, options || {});\n    }\n  },\n  get: function (selector) {\n    var i = query.indexOf(selector);\n    return i < 0 ? null : assign({}, config[i]);\n  },\n  whenDefined: function (selector) {\n    return Promise.resolve(\n      regularElements.get(selector) ||\n      new Promise(function ($) {\n        waiting[selector] = $;\n      })\n    );\n  }\n};\n\n// passing along regularElements as poly for Event and WeakSet\nvar lifecycle = disconnected(regularElements);\nvar observe = {\n  attributechanged: attributechanged(regularElements),\n  connected: lifecycle,\n  disconnected: lifecycle\n};\n\nexport default regularElements;\nexport {regularElements, assign, Event, WeakSet};\n\nfunction changes(records) {\n  for (var i = 0, length = records.length; i < length; i++)\n    setupList(records[i].addedNodes, false);\n}\n\nfunction init(doc) {\n  try {\n    (new MutationObserver(changes))\n      .observe(doc, {subtree: true, childList: true});\n  }\n  catch(o_O) {\n    doc.addEventListener(\n      'DOMNodeInserted',\n      function (e) {\n        changes([{addedNodes: [e.target]}]);\n      },\n      false\n    );\n  }\n  if (doc.readyState !== 'complete')\n    doc.addEventListener('DOMContentLoaded', ready, {once: true});\n}\n\nfunction ready() {\n  if (query.length)\n    setupList(regularElements.document.querySelectorAll(query), true);\n}\n\nfunction setup(node) {\n  setupList(node.querySelectorAll(query), true);\n  for (var ws, css, i = 0, length = query.length; i < length; i++) {\n    css = query[i];\n    ws = known[css] || (known[css] = new WeakSet);\n    if (!ws.has(node) && matches(node, query[i])) {\n      ws.add(node);\n      setupListeners(node, config[i]);\n    }\n  }\n}\n\nfunction setupList(nodes, isElement) {\n  for (var node, i = 0, length = nodes.length; i < length; i++) {\n    node = nodes[i];\n    if (isElement || node.nodeType === 1)\n      setup(node);\n  }\n}\n\nfunction setupListener(node, options, type, dispatch) {\n  var method = options['on' + type];\n  if (method) {\n    observe[type](node, options.attributeFilter)\n      .addEventListener(type, method, false);\n    if (dispatch && contains.call(regularElements.document, node))\n      node.dispatchEvent(new Event(type));\n  }\n}\n\nfunction setupListeners(node, options) {\n  setupListener(node, options, 'attributechanged', false);\n  setupListener(node, options, 'disconnected', false);\n  setupListener(node, options, 'connected', true);\n}\n","/**\n * ISC License\n *\n * Copyright (c) 2018, Andrea Giammarchi, @WebReflection\n *\n * Permission to use, copy, modify, and/or distribute this software for any\n * purpose with or without fee is hereby granted, provided that the above\n * copyright notice and this permission notice appear in all copies.\n *\n * THE SOFTWARE IS PROVIDED \"AS IS\" AND THE AUTHOR DISCLAIMS ALL WARRANTIES WITH\n * REGARD TO THIS SOFTWARE INCLUDING ALL IMPLIED WARRANTIES OF MERCHANTABILITY\n * AND FITNESS. IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR ANY SPECIAL, DIRECT,\n * INDIRECT, OR CONSEQUENTIAL DAMAGES OR ANY DAMAGES WHATSOEVER RESULTING FROM\n * LOSS OF USE, DATA OR PROFITS, WHETHER IN AN ACTION OF CONTRACT, NEGLIGENCE\n * OR OTHER TORTIOUS ACTION, ARISING OUT OF OR IN CONNECTION WITH THE USE OR\n * PERFORMANCE OF THIS SOFTWARE.\n */\n\nimport regularElements, {WeakSet} from './3rd/regular-elements/index.js';\n\n// minifier friendly constants\nvar ATTRIBUTE_FILTER = 'attributeFilter';\nvar ONDISCONNECTED = 'ondisconnected';\nvar ONATTRIBUTECHANGED = 'onattributechanged';\n\n// one off scoped shortcut\nvar create = Object.create;\n\n// get() and whenDefined() are just the same\n// NOTE: the component is not returned,\n//       only its initial definition.\n//       This works well in terms of security\n//       so that a component prototype won't be\n//       exposed directly through the API.\nvar wickedElements = create(regularElements, {\n  define: {\n    value: function (selector, component) {\n      var ws = new WeakSet;\n      var definition = {onconnected: setup};\n      if (ONDISCONNECTED in component)\n        definition[ONDISCONNECTED] = setup;\n      if (ONATTRIBUTECHANGED in component) {\n        definition[ONATTRIBUTECHANGED] = setup;\n        definition[ATTRIBUTE_FILTER] = component[ATTRIBUTE_FILTER] || [];\n      }\n      addIfNeeded(component, 'init', init);\n      addIfNeeded(component, 'handleEvent', handleEvent);\n      regularElements.define(selector, definition);\n      function setup(event) {\n        var el = event.currentTarget;\n        var type = event.type;\n        el.removeEventListener(type, setup);\n        if (!ws.has(el)) {\n          ws.add(el);\n          bootstrap(component, event, el, 'on' + type);\n        }\n      }\n    }\n  }\n});\n\nexport default wickedElements;\n\nfunction addIfNeeded(component, key, value) {\n  if (!(key in component))\n    component[key] = value;\n}\n\nfunction bootstrap(component, event, el, method) {\n  var handler = create(component);\n  var invoke = false;\n  for (var key in component) {\n    if (key.slice(0, 2) === 'on') {\n      el.addEventListener(key.slice(2), handler, false);\n      if (key === method)\n        invoke = !invoke;\n    }\n  }\n  handler.init(event);\n  if (invoke)\n    handler.handleEvent(event);\n}\n\nfunction handleEvent(event) {\n  var type = 'on' + event.type;\n  if (type in this)\n    this[type](event);\n}\n\nfunction init(event) {\n  this.el = event.currentTarget;\n}\n","import { Tec1App } from './components/app-root';\nimport { sevenSegDisplay } from './components/seven-seg-display';\nimport { sevenSeg } from './components/seven-seg';\nimport { keyButton } from './components/key-button';\nimport { keyPadClassic } from './components/keypad-classic';\nimport { keyPadModern } from './components/keypad-modern';\n\nimport * as we  from 'wicked-elements';\nconst wickedElements = (we as any).default;\n\nexport function initApp() {\n    wickedElements.define('[is=\"app-root\"]', Tec1App);\n    wickedElements.define('[is=\"seven-seg-display\"]', sevenSegDisplay);\n    wickedElements.define('[is=\"seven-seg\"]', sevenSeg);\n    wickedElements.define('[is=\"key-button\"]', keyButton);\n    wickedElements.define('[is=\"keypad-classic\"]', keyPadClassic);\n    wickedElements.define('[is=\"keypad-modern\"]', keyPadModern);\n}\n","import {initApp} from './app';\n\ninitApp();\n"]}